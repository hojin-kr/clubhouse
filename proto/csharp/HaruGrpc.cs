// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/haru.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Haru {
  /// <summary>
  /// Service definition.
  /// </summary>
  public static partial class version1
  {
    static readonly string __ServiceName = "haru.version1";

    static readonly grpc::Marshaller<global::Haru.AccountRequest> __Marshaller_haru_AccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Haru.AccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Haru.AccountReply> __Marshaller_haru_AccountReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Haru.AccountReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Haru.ProfileRequest> __Marshaller_haru_ProfileRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Haru.ProfileRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Haru.ProfileReply> __Marshaller_haru_ProfileReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Haru.ProfileReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Haru.RoundRequest> __Marshaller_haru_RoundRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Haru.RoundRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Haru.RoundReply> __Marshaller_haru_RoundReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Haru.RoundReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Haru.FilterdRoundsRequest> __Marshaller_haru_FilterdRoundsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Haru.FilterdRoundsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Haru.FilterdRoundsReply> __Marshaller_haru_FilterdRoundsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Haru.FilterdRoundsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Haru.JoinRequest> __Marshaller_haru_JoinRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Haru.JoinRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Haru.JoinReply> __Marshaller_haru_JoinReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Haru.JoinReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Haru.AccountRequest, global::Haru.AccountReply> __Method_CreateAccount = new grpc::Method<global::Haru.AccountRequest, global::Haru.AccountReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccount",
        __Marshaller_haru_AccountRequest,
        __Marshaller_haru_AccountReply);

    static readonly grpc::Method<global::Haru.ProfileRequest, global::Haru.ProfileReply> __Method_GetProfile = new grpc::Method<global::Haru.ProfileRequest, global::Haru.ProfileReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProfile",
        __Marshaller_haru_ProfileRequest,
        __Marshaller_haru_ProfileReply);

    static readonly grpc::Method<global::Haru.ProfileRequest, global::Haru.ProfileReply> __Method_UpdateProfile = new grpc::Method<global::Haru.ProfileRequest, global::Haru.ProfileReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateProfile",
        __Marshaller_haru_ProfileRequest,
        __Marshaller_haru_ProfileReply);

    static readonly grpc::Method<global::Haru.RoundRequest, global::Haru.RoundReply> __Method_CreateRound = new grpc::Method<global::Haru.RoundRequest, global::Haru.RoundReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRound",
        __Marshaller_haru_RoundRequest,
        __Marshaller_haru_RoundReply);

    static readonly grpc::Method<global::Haru.RoundRequest, global::Haru.RoundReply> __Method_UpdateRound = new grpc::Method<global::Haru.RoundRequest, global::Haru.RoundReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRound",
        __Marshaller_haru_RoundRequest,
        __Marshaller_haru_RoundReply);

    static readonly grpc::Method<global::Haru.RoundRequest, global::Haru.RoundReply> __Method_GetRound = new grpc::Method<global::Haru.RoundRequest, global::Haru.RoundReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRound",
        __Marshaller_haru_RoundRequest,
        __Marshaller_haru_RoundReply);

    static readonly grpc::Method<global::Haru.FilterdRoundsRequest, global::Haru.FilterdRoundsReply> __Method_GetFilterdRounds = new grpc::Method<global::Haru.FilterdRoundsRequest, global::Haru.FilterdRoundsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFilterdRounds",
        __Marshaller_haru_FilterdRoundsRequest,
        __Marshaller_haru_FilterdRoundsReply);

    static readonly grpc::Method<global::Haru.JoinRequest, global::Haru.JoinReply> __Method_JoinRound = new grpc::Method<global::Haru.JoinRequest, global::Haru.JoinReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JoinRound",
        __Marshaller_haru_JoinRequest,
        __Marshaller_haru_JoinReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Haru.HaruReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of version1</summary>
    [grpc::BindServiceMethod(typeof(version1), "BindService")]
    public abstract partial class version1Base
    {
      public virtual global::System.Threading.Tasks.Task<global::Haru.AccountReply> CreateAccount(global::Haru.AccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Haru.ProfileReply> GetProfile(global::Haru.ProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Haru.ProfileReply> UpdateProfile(global::Haru.ProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Haru.RoundReply> CreateRound(global::Haru.RoundRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Haru.RoundReply> UpdateRound(global::Haru.RoundRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Haru.RoundReply> GetRound(global::Haru.RoundRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Haru.FilterdRoundsReply> GetFilterdRounds(global::Haru.FilterdRoundsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Haru.JoinReply> JoinRound(global::Haru.JoinRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for version1</summary>
    public partial class version1Client : grpc::ClientBase<version1Client>
    {
      /// <summary>Creates a new client for version1</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public version1Client(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for version1 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public version1Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected version1Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected version1Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Haru.AccountReply CreateAccount(global::Haru.AccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Haru.AccountReply CreateAccount(global::Haru.AccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.AccountReply> CreateAccountAsync(global::Haru.AccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.AccountReply> CreateAccountAsync(global::Haru.AccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccount, null, options, request);
      }
      public virtual global::Haru.ProfileReply GetProfile(global::Haru.ProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Haru.ProfileReply GetProfile(global::Haru.ProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProfile, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.ProfileReply> GetProfileAsync(global::Haru.ProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.ProfileReply> GetProfileAsync(global::Haru.ProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProfile, null, options, request);
      }
      public virtual global::Haru.ProfileReply UpdateProfile(global::Haru.ProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Haru.ProfileReply UpdateProfile(global::Haru.ProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateProfile, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.ProfileReply> UpdateProfileAsync(global::Haru.ProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.ProfileReply> UpdateProfileAsync(global::Haru.ProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateProfile, null, options, request);
      }
      public virtual global::Haru.RoundReply CreateRound(global::Haru.RoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRound(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Haru.RoundReply CreateRound(global::Haru.RoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRound, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.RoundReply> CreateRoundAsync(global::Haru.RoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRoundAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.RoundReply> CreateRoundAsync(global::Haru.RoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRound, null, options, request);
      }
      public virtual global::Haru.RoundReply UpdateRound(global::Haru.RoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRound(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Haru.RoundReply UpdateRound(global::Haru.RoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRound, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.RoundReply> UpdateRoundAsync(global::Haru.RoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRoundAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.RoundReply> UpdateRoundAsync(global::Haru.RoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRound, null, options, request);
      }
      public virtual global::Haru.RoundReply GetRound(global::Haru.RoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRound(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Haru.RoundReply GetRound(global::Haru.RoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRound, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.RoundReply> GetRoundAsync(global::Haru.RoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoundAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.RoundReply> GetRoundAsync(global::Haru.RoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRound, null, options, request);
      }
      public virtual global::Haru.FilterdRoundsReply GetFilterdRounds(global::Haru.FilterdRoundsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFilterdRounds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Haru.FilterdRoundsReply GetFilterdRounds(global::Haru.FilterdRoundsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFilterdRounds, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.FilterdRoundsReply> GetFilterdRoundsAsync(global::Haru.FilterdRoundsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFilterdRoundsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.FilterdRoundsReply> GetFilterdRoundsAsync(global::Haru.FilterdRoundsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFilterdRounds, null, options, request);
      }
      public virtual global::Haru.JoinReply JoinRound(global::Haru.JoinRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinRound(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Haru.JoinReply JoinRound(global::Haru.JoinRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JoinRound, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.JoinReply> JoinRoundAsync(global::Haru.JoinRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinRoundAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Haru.JoinReply> JoinRoundAsync(global::Haru.JoinRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JoinRound, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override version1Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new version1Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(version1Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateAccount, serviceImpl.CreateAccount)
          .AddMethod(__Method_GetProfile, serviceImpl.GetProfile)
          .AddMethod(__Method_UpdateProfile, serviceImpl.UpdateProfile)
          .AddMethod(__Method_CreateRound, serviceImpl.CreateRound)
          .AddMethod(__Method_UpdateRound, serviceImpl.UpdateRound)
          .AddMethod(__Method_GetRound, serviceImpl.GetRound)
          .AddMethod(__Method_GetFilterdRounds, serviceImpl.GetFilterdRounds)
          .AddMethod(__Method_JoinRound, serviceImpl.JoinRound).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, version1Base serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Haru.AccountRequest, global::Haru.AccountReply>(serviceImpl.CreateAccount));
      serviceBinder.AddMethod(__Method_GetProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Haru.ProfileRequest, global::Haru.ProfileReply>(serviceImpl.GetProfile));
      serviceBinder.AddMethod(__Method_UpdateProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Haru.ProfileRequest, global::Haru.ProfileReply>(serviceImpl.UpdateProfile));
      serviceBinder.AddMethod(__Method_CreateRound, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Haru.RoundRequest, global::Haru.RoundReply>(serviceImpl.CreateRound));
      serviceBinder.AddMethod(__Method_UpdateRound, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Haru.RoundRequest, global::Haru.RoundReply>(serviceImpl.UpdateRound));
      serviceBinder.AddMethod(__Method_GetRound, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Haru.RoundRequest, global::Haru.RoundReply>(serviceImpl.GetRound));
      serviceBinder.AddMethod(__Method_GetFilterdRounds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Haru.FilterdRoundsRequest, global::Haru.FilterdRoundsReply>(serviceImpl.GetFilterdRounds));
      serviceBinder.AddMethod(__Method_JoinRound, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Haru.JoinRequest, global::Haru.JoinReply>(serviceImpl.JoinRound));
    }

  }
}
#endregion
