//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: haru.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service definition.
///
/// Usage: instantiate `Haru_version1Client`, then call methods of this protocol to make API calls.
internal protocol Haru_version1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Haru_version1ClientInterceptorFactoryProtocol? { get }

  func createAccount(
    _ request: Haru_AccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_AccountRequest, Haru_AccountReply>

  func getProfile(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_ProfileRequest, Haru_ProfileReply>

  func updateProfile(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_ProfileRequest, Haru_ProfileReply>

  func createRound(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_RoundRequest, Haru_RoundReply>

  func updateRound(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_RoundRequest, Haru_RoundReply>

  func getRound(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_RoundRequest, Haru_RoundReply>

  func getFilterdRounds(
    _ request: Haru_FilterdRoundsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_FilterdRoundsRequest, Haru_FilterdRoundsReply>

  func joinRound(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_JoinRequest, Haru_JoinReply>
}

extension Haru_version1ClientProtocol {
  internal var serviceName: String {
    return "haru.version1"
  }

  /// Unary call to CreateAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAccount(
    _ request: Haru_AccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_AccountRequest, Haru_AccountReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? []
    )
  }

  /// Unary call to GetProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProfile(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_ProfileRequest, Haru_ProfileReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProfileInterceptors() ?? []
    )
  }

  /// Unary call to UpdateProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateProfile(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_ProfileRequest, Haru_ProfileReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? []
    )
  }

  /// Unary call to CreateRound
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateRound.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createRound(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_RoundRequest, Haru_RoundReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createRound.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRoundInterceptors() ?? []
    )
  }

  /// Unary call to UpdateRound
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateRound.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateRound(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_RoundRequest, Haru_RoundReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateRound.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRoundInterceptors() ?? []
    )
  }

  /// Unary call to GetRound
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRound.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRound(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_RoundRequest, Haru_RoundReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getRound.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRoundInterceptors() ?? []
    )
  }

  /// Unary call to GetFilterdRounds
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFilterdRounds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFilterdRounds(
    _ request: Haru_FilterdRoundsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_FilterdRoundsRequest, Haru_FilterdRoundsReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getFilterdRounds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFilterdRoundsInterceptors() ?? []
    )
  }

  /// Unary call to JoinRound
  ///
  /// - Parameters:
  ///   - request: Request to send to JoinRound.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func joinRound(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_JoinRequest, Haru_JoinReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.joinRound.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinRoundInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Haru_version1Client: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Haru_version1NIOClient")
internal final class Haru_version1Client: Haru_version1ClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Haru_version1ClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Haru_version1ClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the haru.version1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Haru_version1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Haru_version1NIOClient: Haru_version1ClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Haru_version1ClientInterceptorFactoryProtocol?

  /// Creates a client for the haru.version1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Haru_version1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Service definition.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Haru_version1AsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Haru_version1ClientInterceptorFactoryProtocol? { get }

  func makeCreateAccountCall(
    _ request: Haru_AccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_AccountRequest, Haru_AccountReply>

  func makeGetProfileCall(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_ProfileRequest, Haru_ProfileReply>

  func makeUpdateProfileCall(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_ProfileRequest, Haru_ProfileReply>

  func makeCreateRoundCall(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_RoundRequest, Haru_RoundReply>

  func makeUpdateRoundCall(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_RoundRequest, Haru_RoundReply>

  func makeGetRoundCall(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_RoundRequest, Haru_RoundReply>

  func makeGetFilterdRoundsCall(
    _ request: Haru_FilterdRoundsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_FilterdRoundsRequest, Haru_FilterdRoundsReply>

  func makeJoinRoundCall(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_JoinRequest, Haru_JoinReply>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Haru_version1AsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Haru_version1ClientMetadata.serviceDescriptor
  }

  internal var interceptors: Haru_version1ClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateAccountCall(
    _ request: Haru_AccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_AccountRequest, Haru_AccountReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? []
    )
  }

  internal func makeGetProfileCall(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_ProfileRequest, Haru_ProfileReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProfileInterceptors() ?? []
    )
  }

  internal func makeUpdateProfileCall(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_ProfileRequest, Haru_ProfileReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? []
    )
  }

  internal func makeCreateRoundCall(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_RoundRequest, Haru_RoundReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createRound.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRoundInterceptors() ?? []
    )
  }

  internal func makeUpdateRoundCall(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_RoundRequest, Haru_RoundReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateRound.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRoundInterceptors() ?? []
    )
  }

  internal func makeGetRoundCall(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_RoundRequest, Haru_RoundReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getRound.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRoundInterceptors() ?? []
    )
  }

  internal func makeGetFilterdRoundsCall(
    _ request: Haru_FilterdRoundsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_FilterdRoundsRequest, Haru_FilterdRoundsReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getFilterdRounds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFilterdRoundsInterceptors() ?? []
    )
  }

  internal func makeJoinRoundCall(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_JoinRequest, Haru_JoinReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.joinRound.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinRoundInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Haru_version1AsyncClientProtocol {
  internal func createAccount(
    _ request: Haru_AccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_AccountReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? []
    )
  }

  internal func getProfile(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_ProfileReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProfileInterceptors() ?? []
    )
  }

  internal func updateProfile(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_ProfileReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? []
    )
  }

  internal func createRound(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_RoundReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createRound.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRoundInterceptors() ?? []
    )
  }

  internal func updateRound(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_RoundReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateRound.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRoundInterceptors() ?? []
    )
  }

  internal func getRound(
    _ request: Haru_RoundRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_RoundReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getRound.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRoundInterceptors() ?? []
    )
  }

  internal func getFilterdRounds(
    _ request: Haru_FilterdRoundsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_FilterdRoundsReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getFilterdRounds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFilterdRoundsInterceptors() ?? []
    )
  }

  internal func joinRound(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_JoinReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.joinRound.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinRoundInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Haru_version1AsyncClient: Haru_version1AsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Haru_version1ClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Haru_version1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Haru_version1ClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'createAccount'.
  func makeCreateAccountInterceptors() -> [ClientInterceptor<Haru_AccountRequest, Haru_AccountReply>]

  /// - Returns: Interceptors to use when invoking 'getProfile'.
  func makeGetProfileInterceptors() -> [ClientInterceptor<Haru_ProfileRequest, Haru_ProfileReply>]

  /// - Returns: Interceptors to use when invoking 'updateProfile'.
  func makeUpdateProfileInterceptors() -> [ClientInterceptor<Haru_ProfileRequest, Haru_ProfileReply>]

  /// - Returns: Interceptors to use when invoking 'createRound'.
  func makeCreateRoundInterceptors() -> [ClientInterceptor<Haru_RoundRequest, Haru_RoundReply>]

  /// - Returns: Interceptors to use when invoking 'updateRound'.
  func makeUpdateRoundInterceptors() -> [ClientInterceptor<Haru_RoundRequest, Haru_RoundReply>]

  /// - Returns: Interceptors to use when invoking 'getRound'.
  func makeGetRoundInterceptors() -> [ClientInterceptor<Haru_RoundRequest, Haru_RoundReply>]

  /// - Returns: Interceptors to use when invoking 'getFilterdRounds'.
  func makeGetFilterdRoundsInterceptors() -> [ClientInterceptor<Haru_FilterdRoundsRequest, Haru_FilterdRoundsReply>]

  /// - Returns: Interceptors to use when invoking 'joinRound'.
  func makeJoinRoundInterceptors() -> [ClientInterceptor<Haru_JoinRequest, Haru_JoinReply>]
}

internal enum Haru_version1ClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "version1",
    fullName: "haru.version1",
    methods: [
      Haru_version1ClientMetadata.Methods.createAccount,
      Haru_version1ClientMetadata.Methods.getProfile,
      Haru_version1ClientMetadata.Methods.updateProfile,
      Haru_version1ClientMetadata.Methods.createRound,
      Haru_version1ClientMetadata.Methods.updateRound,
      Haru_version1ClientMetadata.Methods.getRound,
      Haru_version1ClientMetadata.Methods.getFilterdRounds,
      Haru_version1ClientMetadata.Methods.joinRound,
    ]
  )

  internal enum Methods {
    internal static let createAccount = GRPCMethodDescriptor(
      name: "CreateAccount",
      path: "/haru.version1/CreateAccount",
      type: GRPCCallType.unary
    )

    internal static let getProfile = GRPCMethodDescriptor(
      name: "GetProfile",
      path: "/haru.version1/GetProfile",
      type: GRPCCallType.unary
    )

    internal static let updateProfile = GRPCMethodDescriptor(
      name: "UpdateProfile",
      path: "/haru.version1/UpdateProfile",
      type: GRPCCallType.unary
    )

    internal static let createRound = GRPCMethodDescriptor(
      name: "CreateRound",
      path: "/haru.version1/CreateRound",
      type: GRPCCallType.unary
    )

    internal static let updateRound = GRPCMethodDescriptor(
      name: "UpdateRound",
      path: "/haru.version1/UpdateRound",
      type: GRPCCallType.unary
    )

    internal static let getRound = GRPCMethodDescriptor(
      name: "GetRound",
      path: "/haru.version1/GetRound",
      type: GRPCCallType.unary
    )

    internal static let getFilterdRounds = GRPCMethodDescriptor(
      name: "GetFilterdRounds",
      path: "/haru.version1/GetFilterdRounds",
      type: GRPCCallType.unary
    )

    internal static let joinRound = GRPCMethodDescriptor(
      name: "JoinRound",
      path: "/haru.version1/JoinRound",
      type: GRPCCallType.unary
    )
  }
}

/// Service definition.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Haru_version1Provider: CallHandlerProvider {
  var interceptors: Haru_version1ServerInterceptorFactoryProtocol? { get }

  func createAccount(request: Haru_AccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_AccountReply>

  func getProfile(request: Haru_ProfileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_ProfileReply>

  func updateProfile(request: Haru_ProfileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_ProfileReply>

  func createRound(request: Haru_RoundRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_RoundReply>

  func updateRound(request: Haru_RoundRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_RoundReply>

  func getRound(request: Haru_RoundRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_RoundReply>

  func getFilterdRounds(request: Haru_FilterdRoundsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_FilterdRoundsReply>

  func joinRound(request: Haru_JoinRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_JoinReply>
}

extension Haru_version1Provider {
  internal var serviceName: Substring {
    return Haru_version1ServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_AccountRequest>(),
        responseSerializer: ProtobufSerializer<Haru_AccountReply>(),
        interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? [],
        userFunction: self.createAccount(request:context:)
      )

    case "GetProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ProfileRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ProfileReply>(),
        interceptors: self.interceptors?.makeGetProfileInterceptors() ?? [],
        userFunction: self.getProfile(request:context:)
      )

    case "UpdateProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ProfileRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ProfileReply>(),
        interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? [],
        userFunction: self.updateProfile(request:context:)
      )

    case "CreateRound":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_RoundRequest>(),
        responseSerializer: ProtobufSerializer<Haru_RoundReply>(),
        interceptors: self.interceptors?.makeCreateRoundInterceptors() ?? [],
        userFunction: self.createRound(request:context:)
      )

    case "UpdateRound":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_RoundRequest>(),
        responseSerializer: ProtobufSerializer<Haru_RoundReply>(),
        interceptors: self.interceptors?.makeUpdateRoundInterceptors() ?? [],
        userFunction: self.updateRound(request:context:)
      )

    case "GetRound":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_RoundRequest>(),
        responseSerializer: ProtobufSerializer<Haru_RoundReply>(),
        interceptors: self.interceptors?.makeGetRoundInterceptors() ?? [],
        userFunction: self.getRound(request:context:)
      )

    case "GetFilterdRounds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_FilterdRoundsRequest>(),
        responseSerializer: ProtobufSerializer<Haru_FilterdRoundsReply>(),
        interceptors: self.interceptors?.makeGetFilterdRoundsInterceptors() ?? [],
        userFunction: self.getFilterdRounds(request:context:)
      )

    case "JoinRound":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_JoinRequest>(),
        responseSerializer: ProtobufSerializer<Haru_JoinReply>(),
        interceptors: self.interceptors?.makeJoinRoundInterceptors() ?? [],
        userFunction: self.joinRound(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// Service definition.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Haru_version1AsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Haru_version1ServerInterceptorFactoryProtocol? { get }

  @Sendable func createAccount(
    request: Haru_AccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_AccountReply

  @Sendable func getProfile(
    request: Haru_ProfileRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_ProfileReply

  @Sendable func updateProfile(
    request: Haru_ProfileRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_ProfileReply

  @Sendable func createRound(
    request: Haru_RoundRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_RoundReply

  @Sendable func updateRound(
    request: Haru_RoundRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_RoundReply

  @Sendable func getRound(
    request: Haru_RoundRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_RoundReply

  @Sendable func getFilterdRounds(
    request: Haru_FilterdRoundsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_FilterdRoundsReply

  @Sendable func joinRound(
    request: Haru_JoinRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_JoinReply
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Haru_version1AsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Haru_version1ServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Haru_version1ServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Haru_version1ServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_AccountRequest>(),
        responseSerializer: ProtobufSerializer<Haru_AccountReply>(),
        interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? [],
        wrapping: self.createAccount(request:context:)
      )

    case "GetProfile":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ProfileRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ProfileReply>(),
        interceptors: self.interceptors?.makeGetProfileInterceptors() ?? [],
        wrapping: self.getProfile(request:context:)
      )

    case "UpdateProfile":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ProfileRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ProfileReply>(),
        interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? [],
        wrapping: self.updateProfile(request:context:)
      )

    case "CreateRound":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_RoundRequest>(),
        responseSerializer: ProtobufSerializer<Haru_RoundReply>(),
        interceptors: self.interceptors?.makeCreateRoundInterceptors() ?? [],
        wrapping: self.createRound(request:context:)
      )

    case "UpdateRound":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_RoundRequest>(),
        responseSerializer: ProtobufSerializer<Haru_RoundReply>(),
        interceptors: self.interceptors?.makeUpdateRoundInterceptors() ?? [],
        wrapping: self.updateRound(request:context:)
      )

    case "GetRound":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_RoundRequest>(),
        responseSerializer: ProtobufSerializer<Haru_RoundReply>(),
        interceptors: self.interceptors?.makeGetRoundInterceptors() ?? [],
        wrapping: self.getRound(request:context:)
      )

    case "GetFilterdRounds":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_FilterdRoundsRequest>(),
        responseSerializer: ProtobufSerializer<Haru_FilterdRoundsReply>(),
        interceptors: self.interceptors?.makeGetFilterdRoundsInterceptors() ?? [],
        wrapping: self.getFilterdRounds(request:context:)
      )

    case "JoinRound":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_JoinRequest>(),
        responseSerializer: ProtobufSerializer<Haru_JoinReply>(),
        interceptors: self.interceptors?.makeJoinRoundInterceptors() ?? [],
        wrapping: self.joinRound(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Haru_version1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAccountInterceptors() -> [ServerInterceptor<Haru_AccountRequest, Haru_AccountReply>]

  /// - Returns: Interceptors to use when handling 'getProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProfileInterceptors() -> [ServerInterceptor<Haru_ProfileRequest, Haru_ProfileReply>]

  /// - Returns: Interceptors to use when handling 'updateProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateProfileInterceptors() -> [ServerInterceptor<Haru_ProfileRequest, Haru_ProfileReply>]

  /// - Returns: Interceptors to use when handling 'createRound'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateRoundInterceptors() -> [ServerInterceptor<Haru_RoundRequest, Haru_RoundReply>]

  /// - Returns: Interceptors to use when handling 'updateRound'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateRoundInterceptors() -> [ServerInterceptor<Haru_RoundRequest, Haru_RoundReply>]

  /// - Returns: Interceptors to use when handling 'getRound'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRoundInterceptors() -> [ServerInterceptor<Haru_RoundRequest, Haru_RoundReply>]

  /// - Returns: Interceptors to use when handling 'getFilterdRounds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFilterdRoundsInterceptors() -> [ServerInterceptor<Haru_FilterdRoundsRequest, Haru_FilterdRoundsReply>]

  /// - Returns: Interceptors to use when handling 'joinRound'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeJoinRoundInterceptors() -> [ServerInterceptor<Haru_JoinRequest, Haru_JoinReply>]
}

internal enum Haru_version1ServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "version1",
    fullName: "haru.version1",
    methods: [
      Haru_version1ServerMetadata.Methods.createAccount,
      Haru_version1ServerMetadata.Methods.getProfile,
      Haru_version1ServerMetadata.Methods.updateProfile,
      Haru_version1ServerMetadata.Methods.createRound,
      Haru_version1ServerMetadata.Methods.updateRound,
      Haru_version1ServerMetadata.Methods.getRound,
      Haru_version1ServerMetadata.Methods.getFilterdRounds,
      Haru_version1ServerMetadata.Methods.joinRound,
    ]
  )

  internal enum Methods {
    internal static let createAccount = GRPCMethodDescriptor(
      name: "CreateAccount",
      path: "/haru.version1/CreateAccount",
      type: GRPCCallType.unary
    )

    internal static let getProfile = GRPCMethodDescriptor(
      name: "GetProfile",
      path: "/haru.version1/GetProfile",
      type: GRPCCallType.unary
    )

    internal static let updateProfile = GRPCMethodDescriptor(
      name: "UpdateProfile",
      path: "/haru.version1/UpdateProfile",
      type: GRPCCallType.unary
    )

    internal static let createRound = GRPCMethodDescriptor(
      name: "CreateRound",
      path: "/haru.version1/CreateRound",
      type: GRPCCallType.unary
    )

    internal static let updateRound = GRPCMethodDescriptor(
      name: "UpdateRound",
      path: "/haru.version1/UpdateRound",
      type: GRPCCallType.unary
    )

    internal static let getRound = GRPCMethodDescriptor(
      name: "GetRound",
      path: "/haru.version1/GetRound",
      type: GRPCCallType.unary
    )

    internal static let getFilterdRounds = GRPCMethodDescriptor(
      name: "GetFilterdRounds",
      path: "/haru.version1/GetFilterdRounds",
      type: GRPCCallType.unary
    )

    internal static let joinRound = GRPCMethodDescriptor(
      name: "JoinRound",
      path: "/haru.version1/JoinRound",
      type: GRPCCallType.unary
    )
  }
}
