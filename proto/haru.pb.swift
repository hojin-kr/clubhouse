// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: haru.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Haru_AccountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var registerTimestamp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_AccountReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var registerTimestamp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_ProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var nickname: String = String()

  var age: Int64 = 0

  var sex: Int64 = 0

  var scoreOfGross: Int64 = 0

  var experienceOfYears: Int64 = 0

  var rounds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_ProfileReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var nickname: String = String()

  var age: Int64 = 0

  var sex: Int64 = 0

  var scoreOfGross: Int64 = 0

  var experienceOfYears: Int64 = 0

  var rounds: [String] = []

  var desc: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_RoundRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var round: Haru_Round {
    get {return _storage._round ?? Haru_Round()}
    set {_uniqueStorage()._round = newValue}
  }
  /// Returns true if `round` has been explicitly set.
  var hasRound: Bool {return _storage._round != nil}
  /// Clears the value of `round`. Subsequent reads from it will return its default value.
  mutating func clearRound() {_uniqueStorage()._round = nil}

  var place: Haru_Place {
    get {return _storage._place ?? Haru_Place()}
    set {_uniqueStorage()._place = newValue}
  }
  /// Returns true if `place` has been explicitly set.
  var hasPlace: Bool {return _storage._place != nil}
  /// Clears the value of `place`. Subsequent reads from it will return its default value.
  mutating func clearPlace() {_uniqueStorage()._place = nil}

  var attend: Haru_Attend {
    get {return _storage._attend ?? Haru_Attend()}
    set {_uniqueStorage()._attend = newValue}
  }
  /// Returns true if `attend` has been explicitly set.
  var hasAttend: Bool {return _storage._attend != nil}
  /// Clears the value of `attend`. Subsequent reads from it will return its default value.
  mutating func clearAttend() {_uniqueStorage()._attend = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Haru_RoundReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var round: Haru_Round {
    get {return _storage._round ?? Haru_Round()}
    set {_uniqueStorage()._round = newValue}
  }
  /// Returns true if `round` has been explicitly set.
  var hasRound: Bool {return _storage._round != nil}
  /// Clears the value of `round`. Subsequent reads from it will return its default value.
  mutating func clearRound() {_uniqueStorage()._round = nil}

  var place: Haru_Place {
    get {return _storage._place ?? Haru_Place()}
    set {_uniqueStorage()._place = newValue}
  }
  /// Returns true if `place` has been explicitly set.
  var hasPlace: Bool {return _storage._place != nil}
  /// Clears the value of `place`. Subsequent reads from it will return its default value.
  mutating func clearPlace() {_uniqueStorage()._place = nil}

  var attend: Haru_Attend {
    get {return _storage._attend ?? Haru_Attend()}
    set {_uniqueStorage()._attend = newValue}
  }
  /// Returns true if `attend` has been explicitly set.
  var hasAttend: Bool {return _storage._attend != nil}
  /// Clears the value of `attend`. Subsequent reads from it will return its default value.
  mutating func clearAttend() {_uniqueStorage()._attend = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Haru_Round {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var host: Int64 = 0

  var time: Int64 = 0

  var price: Int64 = 0

  /// type 으로 상황별 구분해서 사용 ex ) 0 : 필드 18홀, 1 : 필드 9홀, 2 : 스크린 9홀 ...
  var typePlay: Int64 = 0

  var typeAge: Int64 = 0

  var typeSex: Int64 = 0

  var typeScoreOfGross: Int64 = 0

  var typeExperienceOfYears: Int64 = 0

  var placeID: String = String()

  var placeName: String = String()

  var placeAddress: String = String()

  /// 탐색용 키
  var shortAddress: String = String()

  var lat: String = String()

  var long: String = String()

  var updated: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_Place {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var name: String = String()

  var location: String = String()

  var lat: String = String()

  var long: String = String()

  var photo: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_Attend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var ids: [Int64] = []

  var updated: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_Review {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var ids: [Int64] = []

  var reviews: [String] = []

  var updated: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_FilterdRoundsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isInit: Bool = false

  var timeMin: Int64 = 0

  var timeMax: Int64 = 0

  var page: Int64 = 0

  var typePlay: Int64 = 0

  var typeAge: Int64 = 0

  var typeSex: Int64 = 0

  var typeScoreOfGross: Int64 = 0

  var typeExperienceOfYears: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_FilterdRoundsReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rounds: [Haru_Round] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Haru_AccountRequest: @unchecked Sendable {}
extension Haru_AccountReply: @unchecked Sendable {}
extension Haru_ProfileRequest: @unchecked Sendable {}
extension Haru_ProfileReply: @unchecked Sendable {}
extension Haru_RoundRequest: @unchecked Sendable {}
extension Haru_RoundReply: @unchecked Sendable {}
extension Haru_Round: @unchecked Sendable {}
extension Haru_Place: @unchecked Sendable {}
extension Haru_Attend: @unchecked Sendable {}
extension Haru_Review: @unchecked Sendable {}
extension Haru_FilterdRoundsRequest: @unchecked Sendable {}
extension Haru_FilterdRoundsReply: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "haru"

extension Haru_AccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "register_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.registerTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.registerTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.registerTimestamp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_AccountRequest, rhs: Haru_AccountRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.registerTimestamp != rhs.registerTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_AccountReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "register_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.registerTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.registerTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.registerTimestamp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_AccountReply, rhs: Haru_AccountReply) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.registerTimestamp != rhs.registerTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_ProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProfileRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "nickname"),
    3: .same(proto: "age"),
    7: .same(proto: "sex"),
    8: .standard(proto: "score_of_gross"),
    9: .standard(proto: "experience_of_years"),
    10: .same(proto: "rounds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nickname) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.age) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.sex) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.scoreOfGross) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.experienceOfYears) }()
      case 10: try { try decoder.decodeRepeatedStringField(value: &self.rounds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 2)
    }
    if self.age != 0 {
      try visitor.visitSingularInt64Field(value: self.age, fieldNumber: 3)
    }
    if self.sex != 0 {
      try visitor.visitSingularInt64Field(value: self.sex, fieldNumber: 7)
    }
    if self.scoreOfGross != 0 {
      try visitor.visitSingularInt64Field(value: self.scoreOfGross, fieldNumber: 8)
    }
    if self.experienceOfYears != 0 {
      try visitor.visitSingularInt64Field(value: self.experienceOfYears, fieldNumber: 9)
    }
    if !self.rounds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.rounds, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_ProfileRequest, rhs: Haru_ProfileRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.nickname != rhs.nickname {return false}
    if lhs.age != rhs.age {return false}
    if lhs.sex != rhs.sex {return false}
    if lhs.scoreOfGross != rhs.scoreOfGross {return false}
    if lhs.experienceOfYears != rhs.experienceOfYears {return false}
    if lhs.rounds != rhs.rounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_ProfileReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProfileReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "nickname"),
    3: .same(proto: "age"),
    7: .same(proto: "sex"),
    8: .standard(proto: "score_of_gross"),
    9: .standard(proto: "experience_of_years"),
    10: .same(proto: "rounds"),
    11: .same(proto: "desc"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nickname) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.age) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.sex) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.scoreOfGross) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.experienceOfYears) }()
      case 10: try { try decoder.decodeRepeatedStringField(value: &self.rounds) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 2)
    }
    if self.age != 0 {
      try visitor.visitSingularInt64Field(value: self.age, fieldNumber: 3)
    }
    if self.sex != 0 {
      try visitor.visitSingularInt64Field(value: self.sex, fieldNumber: 7)
    }
    if self.scoreOfGross != 0 {
      try visitor.visitSingularInt64Field(value: self.scoreOfGross, fieldNumber: 8)
    }
    if self.experienceOfYears != 0 {
      try visitor.visitSingularInt64Field(value: self.experienceOfYears, fieldNumber: 9)
    }
    if !self.rounds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.rounds, fieldNumber: 10)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_ProfileReply, rhs: Haru_ProfileReply) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.nickname != rhs.nickname {return false}
    if lhs.age != rhs.age {return false}
    if lhs.sex != rhs.sex {return false}
    if lhs.scoreOfGross != rhs.scoreOfGross {return false}
    if lhs.experienceOfYears != rhs.experienceOfYears {return false}
    if lhs.rounds != rhs.rounds {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_RoundRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RoundRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "round"),
    2: .same(proto: "place"),
    3: .same(proto: "attend"),
  ]

  fileprivate class _StorageClass {
    var _round: Haru_Round? = nil
    var _place: Haru_Place? = nil
    var _attend: Haru_Attend? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _round = source._round
      _place = source._place
      _attend = source._attend
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._round) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._place) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._attend) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._round {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._place {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._attend {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_RoundRequest, rhs: Haru_RoundRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._round != rhs_storage._round {return false}
        if _storage._place != rhs_storage._place {return false}
        if _storage._attend != rhs_storage._attend {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_RoundReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RoundReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "round"),
    2: .same(proto: "place"),
    3: .same(proto: "attend"),
  ]

  fileprivate class _StorageClass {
    var _round: Haru_Round? = nil
    var _place: Haru_Place? = nil
    var _attend: Haru_Attend? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _round = source._round
      _place = source._place
      _attend = source._attend
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._round) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._place) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._attend) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._round {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._place {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._attend {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_RoundReply, rhs: Haru_RoundReply) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._round != rhs_storage._round {return false}
        if _storage._place != rhs_storage._place {return false}
        if _storage._attend != rhs_storage._attend {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Round: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Round"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "host"),
    3: .same(proto: "time"),
    4: .same(proto: "price"),
    5: .standard(proto: "type_play"),
    6: .standard(proto: "type_age"),
    7: .standard(proto: "type_sex"),
    8: .standard(proto: "type_score_of_gross"),
    9: .standard(proto: "type_experience_of_years"),
    10: .standard(proto: "place_id"),
    11: .standard(proto: "place_name"),
    12: .standard(proto: "place_address"),
    13: .standard(proto: "short_address"),
    14: .same(proto: "lat"),
    15: .same(proto: "long"),
    16: .same(proto: "updated"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.host) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.time) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.price) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.typePlay) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.typeAge) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.typeSex) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.typeScoreOfGross) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.typeExperienceOfYears) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.placeID) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.placeName) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.placeAddress) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.shortAddress) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.lat) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.long) }()
      case 16: try { try decoder.decodeSingularInt64Field(value: &self.updated) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.host != 0 {
      try visitor.visitSingularInt64Field(value: self.host, fieldNumber: 2)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 3)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 4)
    }
    if self.typePlay != 0 {
      try visitor.visitSingularInt64Field(value: self.typePlay, fieldNumber: 5)
    }
    if self.typeAge != 0 {
      try visitor.visitSingularInt64Field(value: self.typeAge, fieldNumber: 6)
    }
    if self.typeSex != 0 {
      try visitor.visitSingularInt64Field(value: self.typeSex, fieldNumber: 7)
    }
    if self.typeScoreOfGross != 0 {
      try visitor.visitSingularInt64Field(value: self.typeScoreOfGross, fieldNumber: 8)
    }
    if self.typeExperienceOfYears != 0 {
      try visitor.visitSingularInt64Field(value: self.typeExperienceOfYears, fieldNumber: 9)
    }
    if !self.placeID.isEmpty {
      try visitor.visitSingularStringField(value: self.placeID, fieldNumber: 10)
    }
    if !self.placeName.isEmpty {
      try visitor.visitSingularStringField(value: self.placeName, fieldNumber: 11)
    }
    if !self.placeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.placeAddress, fieldNumber: 12)
    }
    if !self.shortAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.shortAddress, fieldNumber: 13)
    }
    if !self.lat.isEmpty {
      try visitor.visitSingularStringField(value: self.lat, fieldNumber: 14)
    }
    if !self.long.isEmpty {
      try visitor.visitSingularStringField(value: self.long, fieldNumber: 15)
    }
    if self.updated != 0 {
      try visitor.visitSingularInt64Field(value: self.updated, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Round, rhs: Haru_Round) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.host != rhs.host {return false}
    if lhs.time != rhs.time {return false}
    if lhs.price != rhs.price {return false}
    if lhs.typePlay != rhs.typePlay {return false}
    if lhs.typeAge != rhs.typeAge {return false}
    if lhs.typeSex != rhs.typeSex {return false}
    if lhs.typeScoreOfGross != rhs.typeScoreOfGross {return false}
    if lhs.typeExperienceOfYears != rhs.typeExperienceOfYears {return false}
    if lhs.placeID != rhs.placeID {return false}
    if lhs.placeName != rhs.placeName {return false}
    if lhs.placeAddress != rhs.placeAddress {return false}
    if lhs.shortAddress != rhs.shortAddress {return false}
    if lhs.lat != rhs.lat {return false}
    if lhs.long != rhs.long {return false}
    if lhs.updated != rhs.updated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Place: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Place"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "location"),
    4: .same(proto: "lat"),
    5: .same(proto: "long"),
    6: .same(proto: "photo"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.location) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.lat) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.long) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.photo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 3)
    }
    if !self.lat.isEmpty {
      try visitor.visitSingularStringField(value: self.lat, fieldNumber: 4)
    }
    if !self.long.isEmpty {
      try visitor.visitSingularStringField(value: self.long, fieldNumber: 5)
    }
    if !self.photo.isEmpty {
      try visitor.visitSingularStringField(value: self.photo, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Place, rhs: Haru_Place) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.location != rhs.location {return false}
    if lhs.lat != rhs.lat {return false}
    if lhs.long != rhs.long {return false}
    if lhs.photo != rhs.photo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Attend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Attend"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "ids"),
    3: .same(proto: "updated"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedInt64Field(value: &self.ids) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.updated) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitPackedInt64Field(value: self.ids, fieldNumber: 2)
    }
    if self.updated != 0 {
      try visitor.visitSingularInt64Field(value: self.updated, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Attend, rhs: Haru_Attend) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.updated != rhs.updated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Review: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Review"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "ids"),
    3: .same(proto: "reviews"),
    4: .same(proto: "updated"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedInt64Field(value: &self.ids) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.reviews) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.updated) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitPackedInt64Field(value: self.ids, fieldNumber: 2)
    }
    if !self.reviews.isEmpty {
      try visitor.visitRepeatedStringField(value: self.reviews, fieldNumber: 3)
    }
    if self.updated != 0 {
      try visitor.visitSingularInt64Field(value: self.updated, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Review, rhs: Haru_Review) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.reviews != rhs.reviews {return false}
    if lhs.updated != rhs.updated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_FilterdRoundsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FilterdRoundsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_init"),
    2: .standard(proto: "time_min"),
    3: .standard(proto: "time_max"),
    4: .same(proto: "page"),
    5: .standard(proto: "type_play"),
    6: .standard(proto: "type_age"),
    7: .standard(proto: "type_sex"),
    8: .standard(proto: "type_score_of_gross"),
    9: .standard(proto: "type_experience_of_years"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isInit) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.timeMin) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.timeMax) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.page) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.typePlay) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.typeAge) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.typeSex) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.typeScoreOfGross) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.typeExperienceOfYears) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isInit != false {
      try visitor.visitSingularBoolField(value: self.isInit, fieldNumber: 1)
    }
    if self.timeMin != 0 {
      try visitor.visitSingularInt64Field(value: self.timeMin, fieldNumber: 2)
    }
    if self.timeMax != 0 {
      try visitor.visitSingularInt64Field(value: self.timeMax, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt64Field(value: self.page, fieldNumber: 4)
    }
    if self.typePlay != 0 {
      try visitor.visitSingularInt64Field(value: self.typePlay, fieldNumber: 5)
    }
    if self.typeAge != 0 {
      try visitor.visitSingularInt64Field(value: self.typeAge, fieldNumber: 6)
    }
    if self.typeSex != 0 {
      try visitor.visitSingularInt64Field(value: self.typeSex, fieldNumber: 7)
    }
    if self.typeScoreOfGross != 0 {
      try visitor.visitSingularInt64Field(value: self.typeScoreOfGross, fieldNumber: 8)
    }
    if self.typeExperienceOfYears != 0 {
      try visitor.visitSingularInt64Field(value: self.typeExperienceOfYears, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_FilterdRoundsRequest, rhs: Haru_FilterdRoundsRequest) -> Bool {
    if lhs.isInit != rhs.isInit {return false}
    if lhs.timeMin != rhs.timeMin {return false}
    if lhs.timeMax != rhs.timeMax {return false}
    if lhs.page != rhs.page {return false}
    if lhs.typePlay != rhs.typePlay {return false}
    if lhs.typeAge != rhs.typeAge {return false}
    if lhs.typeSex != rhs.typeSex {return false}
    if lhs.typeScoreOfGross != rhs.typeScoreOfGross {return false}
    if lhs.typeExperienceOfYears != rhs.typeExperienceOfYears {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_FilterdRoundsReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FilterdRoundsReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Rounds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rounds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rounds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rounds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_FilterdRoundsReply, rhs: Haru_FilterdRoundsReply) -> Bool {
    if lhs.rounds != rhs.rounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
