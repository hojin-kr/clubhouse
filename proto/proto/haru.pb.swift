// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/haru.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Haru_Account {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var platformID: String = String()

  var platform: String = String()

  var registerTimestamp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_AccountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var account: Haru_Account {
    get {return _account ?? Haru_Account()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  mutating func clearAccount() {self._account = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _account: Haru_Account? = nil
}

struct Haru_AccountReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var account: Haru_Account {
    get {return _account ?? Haru_Account()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  mutating func clearAccount() {self._account = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _account: Haru_Account? = nil
}

struct Haru_Profile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: Int64 = 0

  var name: String = String()

  var age: Int64 = 0

  var sex: Int64 = 0

  var score: Int64 = 0

  var years: Int64 = 0

  var games: [Int64] = []

  var desc: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_ProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var profile: Haru_Profile {
    get {return _profile ?? Haru_Profile()}
    set {_profile = newValue}
  }
  /// Returns true if `profile` has been explicitly set.
  var hasProfile: Bool {return self._profile != nil}
  /// Clears the value of `profile`. Subsequent reads from it will return its default value.
  mutating func clearProfile() {self._profile = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _profile: Haru_Profile? = nil
}

struct Haru_ProfileReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var profile: Haru_Profile {
    get {return _profile ?? Haru_Profile()}
    set {_profile = newValue}
  }
  /// Returns true if `profile` has been explicitly set.
  var hasProfile: Bool {return self._profile != nil}
  /// Clears the value of `profile`. Subsequent reads from it will return its default value.
  mutating func clearProfile() {self._profile = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _profile: Haru_Profile? = nil
}

struct Haru_Join {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gameID: Int64 = 0

  var accountID: Int64 = 0

  var status: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_JoinRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var join: Haru_Join {
    get {return _join ?? Haru_Join()}
    set {_join = newValue}
  }
  /// Returns true if `join` has been explicitly set.
  var hasJoin: Bool {return self._join != nil}
  /// Clears the value of `join`. Subsequent reads from it will return its default value.
  mutating func clearJoin() {self._join = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _join: Haru_Join? = nil
}

struct Haru_JoinReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var join: Haru_Join {
    get {return _join ?? Haru_Join()}
    set {_join = newValue}
  }
  /// Returns true if `join` has been explicitly set.
  var hasJoin: Bool {return self._join != nil}
  /// Clears the value of `join`. Subsequent reads from it will return its default value.
  mutating func clearJoin() {self._join = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _join: Haru_Join? = nil
}

struct Haru_Game {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var hostAccountID: Int64 = 0

  var time: Int64 = 0

  var price: Int64 = 0

  var typePlay: Int64 = 0

  var typeAge: Int64 = 0

  var typeSex: Int64 = 0

  var typeScore: Int64 = 0

  var typeYears: Int64 = 0

  var typeHole: Int64 = 0

  var personMax: Int64 = 0

  var person: Int64 = 0

  var decs: String = String()

  var place: Haru_Place {
    get {return _place ?? Haru_Place()}
    set {_place = newValue}
  }
  /// Returns true if `place` has been explicitly set.
  var hasPlace: Bool {return self._place != nil}
  /// Clears the value of `place`. Subsequent reads from it will return its default value.
  mutating func clearPlace() {self._place = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _place: Haru_Place? = nil
}

struct Haru_Place {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var address: String = String()

  var shortAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_GameRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var game: Haru_Game {
    get {return _storage._game ?? Haru_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  mutating func clearGame() {_uniqueStorage()._game = nil}

  var join: Haru_Join {
    get {return _storage._join ?? Haru_Join()}
    set {_uniqueStorage()._join = newValue}
  }
  /// Returns true if `join` has been explicitly set.
  var hasJoin: Bool {return _storage._join != nil}
  /// Clears the value of `join`. Subsequent reads from it will return its default value.
  mutating func clearJoin() {_uniqueStorage()._join = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Haru_GameReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var game: Haru_Game {
    get {return _storage._game ?? Haru_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  mutating func clearGame() {_uniqueStorage()._game = nil}

  var join: Haru_Join {
    get {return _storage._join ?? Haru_Join()}
    set {_uniqueStorage()._join = newValue}
  }
  /// Returns true if `join` has been explicitly set.
  var hasJoin: Bool {return _storage._join != nil}
  /// Clears the value of `join`. Subsequent reads from it will return its default value.
  mutating func clearJoin() {_uniqueStorage()._join = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Haru_FilterdGamesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isInit: Bool = false

  var timeMin: Int64 = 0

  var timeMax: Int64 = 0

  var page: Int64 = 0

  var typePlay: Int64 = 0

  var typeAge: Int64 = 0

  var typeSex: Int64 = 0

  var typeScore: Int64 = 0

  var typeYears: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_FilterdGamesReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var games: [Haru_Game] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Haru_Account: @unchecked Sendable {}
extension Haru_AccountRequest: @unchecked Sendable {}
extension Haru_AccountReply: @unchecked Sendable {}
extension Haru_Profile: @unchecked Sendable {}
extension Haru_ProfileRequest: @unchecked Sendable {}
extension Haru_ProfileReply: @unchecked Sendable {}
extension Haru_Join: @unchecked Sendable {}
extension Haru_JoinRequest: @unchecked Sendable {}
extension Haru_JoinReply: @unchecked Sendable {}
extension Haru_Game: @unchecked Sendable {}
extension Haru_Place: @unchecked Sendable {}
extension Haru_GameRequest: @unchecked Sendable {}
extension Haru_GameReply: @unchecked Sendable {}
extension Haru_FilterdGamesRequest: @unchecked Sendable {}
extension Haru_FilterdGamesReply: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "haru"

extension Haru_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Account"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "platform_id"),
    3: .same(proto: "platform"),
    4: .standard(proto: "register_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.platformID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.registerTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.platformID.isEmpty {
      try visitor.visitSingularStringField(value: self.platformID, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    if self.registerTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.registerTimestamp, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Account, rhs: Haru_Account) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.platformID != rhs.platformID {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.registerTimestamp != rhs.registerTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_AccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_AccountRequest, rhs: Haru_AccountRequest) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_AccountReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_AccountReply, rhs: Haru_AccountReply) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Profile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Profile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "name"),
    3: .same(proto: "age"),
    4: .same(proto: "sex"),
    5: .same(proto: "score"),
    6: .same(proto: "years"),
    7: .same(proto: "games"),
    8: .same(proto: "desc"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.accountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.age) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.sex) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.score) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.years) }()
      case 7: try { try decoder.decodeRepeatedInt64Field(value: &self.games) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.accountID != 0 {
      try visitor.visitSingularInt64Field(value: self.accountID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.age != 0 {
      try visitor.visitSingularInt64Field(value: self.age, fieldNumber: 3)
    }
    if self.sex != 0 {
      try visitor.visitSingularInt64Field(value: self.sex, fieldNumber: 4)
    }
    if self.score != 0 {
      try visitor.visitSingularInt64Field(value: self.score, fieldNumber: 5)
    }
    if self.years != 0 {
      try visitor.visitSingularInt64Field(value: self.years, fieldNumber: 6)
    }
    if !self.games.isEmpty {
      try visitor.visitPackedInt64Field(value: self.games, fieldNumber: 7)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Profile, rhs: Haru_Profile) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.age != rhs.age {return false}
    if lhs.sex != rhs.sex {return false}
    if lhs.score != rhs.score {return false}
    if lhs.years != rhs.years {return false}
    if lhs.games != rhs.games {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_ProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProfileRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profile"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._profile) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._profile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_ProfileRequest, rhs: Haru_ProfileRequest) -> Bool {
    if lhs._profile != rhs._profile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_ProfileReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProfileReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profile"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._profile) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._profile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_ProfileReply, rhs: Haru_ProfileReply) -> Bool {
    if lhs._profile != rhs._profile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Join: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Join"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .standard(proto: "account_id"),
    3: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.gameID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.accountID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.gameID != 0 {
      try visitor.visitSingularInt64Field(value: self.gameID, fieldNumber: 1)
    }
    if self.accountID != 0 {
      try visitor.visitSingularInt64Field(value: self.accountID, fieldNumber: 2)
    }
    if self.status != 0 {
      try visitor.visitSingularInt64Field(value: self.status, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Join, rhs: Haru_Join) -> Bool {
    if lhs.gameID != rhs.gameID {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_JoinRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "join"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._join) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._join {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_JoinRequest, rhs: Haru_JoinRequest) -> Bool {
    if lhs._join != rhs._join {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_JoinReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "join"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._join) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._join {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_JoinReply, rhs: Haru_JoinReply) -> Bool {
    if lhs._join != rhs._join {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Game: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Game"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "host_account_id"),
    3: .same(proto: "time"),
    4: .same(proto: "price"),
    5: .standard(proto: "type_play"),
    6: .standard(proto: "type_age"),
    7: .standard(proto: "type_sex"),
    8: .standard(proto: "type_score"),
    9: .standard(proto: "type_years"),
    10: .standard(proto: "type_hole"),
    11: .standard(proto: "person_max"),
    12: .same(proto: "person"),
    13: .same(proto: "decs"),
    14: .same(proto: "place"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.hostAccountID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.time) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.price) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.typePlay) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.typeAge) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.typeSex) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.typeScore) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.typeYears) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.typeHole) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.personMax) }()
      case 12: try { try decoder.decodeSingularInt64Field(value: &self.person) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.decs) }()
      case 14: try { try decoder.decodeSingularMessageField(value: &self._place) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.hostAccountID != 0 {
      try visitor.visitSingularInt64Field(value: self.hostAccountID, fieldNumber: 2)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 3)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 4)
    }
    if self.typePlay != 0 {
      try visitor.visitSingularInt64Field(value: self.typePlay, fieldNumber: 5)
    }
    if self.typeAge != 0 {
      try visitor.visitSingularInt64Field(value: self.typeAge, fieldNumber: 6)
    }
    if self.typeSex != 0 {
      try visitor.visitSingularInt64Field(value: self.typeSex, fieldNumber: 7)
    }
    if self.typeScore != 0 {
      try visitor.visitSingularInt64Field(value: self.typeScore, fieldNumber: 8)
    }
    if self.typeYears != 0 {
      try visitor.visitSingularInt64Field(value: self.typeYears, fieldNumber: 9)
    }
    if self.typeHole != 0 {
      try visitor.visitSingularInt64Field(value: self.typeHole, fieldNumber: 10)
    }
    if self.personMax != 0 {
      try visitor.visitSingularInt64Field(value: self.personMax, fieldNumber: 11)
    }
    if self.person != 0 {
      try visitor.visitSingularInt64Field(value: self.person, fieldNumber: 12)
    }
    if !self.decs.isEmpty {
      try visitor.visitSingularStringField(value: self.decs, fieldNumber: 13)
    }
    try { if let v = self._place {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Game, rhs: Haru_Game) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.hostAccountID != rhs.hostAccountID {return false}
    if lhs.time != rhs.time {return false}
    if lhs.price != rhs.price {return false}
    if lhs.typePlay != rhs.typePlay {return false}
    if lhs.typeAge != rhs.typeAge {return false}
    if lhs.typeSex != rhs.typeSex {return false}
    if lhs.typeScore != rhs.typeScore {return false}
    if lhs.typeYears != rhs.typeYears {return false}
    if lhs.typeHole != rhs.typeHole {return false}
    if lhs.personMax != rhs.personMax {return false}
    if lhs.person != rhs.person {return false}
    if lhs.decs != rhs.decs {return false}
    if lhs._place != rhs._place {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Place: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Place"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "address"),
    3: .standard(proto: "short_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shortAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if !self.shortAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.shortAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Place, rhs: Haru_Place) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.address != rhs.address {return false}
    if lhs.shortAddress != rhs.shortAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_GameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GameRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "game"),
    2: .same(proto: "join"),
  ]

  fileprivate class _StorageClass {
    var _game: Haru_Game? = nil
    var _join: Haru_Join? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _game = source._game
      _join = source._join
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._game) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._join) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._join {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_GameRequest, rhs: Haru_GameRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._game != rhs_storage._game {return false}
        if _storage._join != rhs_storage._join {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_GameReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GameReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "game"),
    2: .same(proto: "join"),
  ]

  fileprivate class _StorageClass {
    var _game: Haru_Game? = nil
    var _join: Haru_Join? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _game = source._game
      _join = source._join
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._game) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._join) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._join {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_GameReply, rhs: Haru_GameReply) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._game != rhs_storage._game {return false}
        if _storage._join != rhs_storage._join {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_FilterdGamesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FilterdGamesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_init"),
    2: .standard(proto: "time_min"),
    3: .standard(proto: "time_max"),
    4: .same(proto: "page"),
    5: .standard(proto: "type_play"),
    6: .standard(proto: "type_age"),
    7: .standard(proto: "type_sex"),
    8: .standard(proto: "type_score"),
    9: .standard(proto: "type_years"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isInit) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.timeMin) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.timeMax) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.page) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.typePlay) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.typeAge) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.typeSex) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.typeScore) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.typeYears) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isInit != false {
      try visitor.visitSingularBoolField(value: self.isInit, fieldNumber: 1)
    }
    if self.timeMin != 0 {
      try visitor.visitSingularInt64Field(value: self.timeMin, fieldNumber: 2)
    }
    if self.timeMax != 0 {
      try visitor.visitSingularInt64Field(value: self.timeMax, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt64Field(value: self.page, fieldNumber: 4)
    }
    if self.typePlay != 0 {
      try visitor.visitSingularInt64Field(value: self.typePlay, fieldNumber: 5)
    }
    if self.typeAge != 0 {
      try visitor.visitSingularInt64Field(value: self.typeAge, fieldNumber: 6)
    }
    if self.typeSex != 0 {
      try visitor.visitSingularInt64Field(value: self.typeSex, fieldNumber: 7)
    }
    if self.typeScore != 0 {
      try visitor.visitSingularInt64Field(value: self.typeScore, fieldNumber: 8)
    }
    if self.typeYears != 0 {
      try visitor.visitSingularInt64Field(value: self.typeYears, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_FilterdGamesRequest, rhs: Haru_FilterdGamesRequest) -> Bool {
    if lhs.isInit != rhs.isInit {return false}
    if lhs.timeMin != rhs.timeMin {return false}
    if lhs.timeMax != rhs.timeMax {return false}
    if lhs.page != rhs.page {return false}
    if lhs.typePlay != rhs.typePlay {return false}
    if lhs.typeAge != rhs.typeAge {return false}
    if lhs.typeSex != rhs.typeSex {return false}
    if lhs.typeScore != rhs.typeScore {return false}
    if lhs.typeYears != rhs.typeYears {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_FilterdGamesReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FilterdGamesReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "games"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.games) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.games.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.games, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_FilterdGamesReply, rhs: Haru_FilterdGamesReply) -> Bool {
    if lhs.games != rhs.games {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
