// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/haru.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Haru_Account {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var platformID: String = String()

  var platform: String = String()

  var registerTimestamp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_AccountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var platformID: String = String()

  var platform: String = String()

  var registerTimestamp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_AccountReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var platformID: String = String()

  var platform: String = String()

  var registerTimestamp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_Profile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: Int64 = 0

  var name: String = String()

  var age: Int64 = 0

  var sex: Int64 = 0

  var score: Int64 = 0

  var years: Int64 = 0

  var games: [Int64] = []

  var desc: String = String()

  var apnsToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_ProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var profile: Haru_Profile {
    get {return _profile ?? Haru_Profile()}
    set {_profile = newValue}
  }
  /// Returns true if `profile` has been explicitly set.
  var hasProfile: Bool {return self._profile != nil}
  /// Clears the value of `profile`. Subsequent reads from it will return its default value.
  mutating func clearProfile() {self._profile = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _profile: Haru_Profile? = nil
}

struct Haru_ProfileReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var profile: Haru_Profile {
    get {return _profile ?? Haru_Profile()}
    set {_profile = newValue}
  }
  /// Returns true if `profile` has been explicitly set.
  var hasProfile: Bool {return self._profile != nil}
  /// Clears the value of `profile`. Subsequent reads from it will return its default value.
  mutating func clearProfile() {self._profile = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _profile: Haru_Profile? = nil
}

struct Haru_Join {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gameID: Int64 = 0

  var accountID: Int64 = 0

  var status: Int64 = 0

  /// for order
  var created: Int64 = 0

  var updated: Int64 = 0

  var joinID: Int64 = 0

  var start: Int64 = 0

  var review: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_JoinRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var join: Haru_Join {
    get {return _join ?? Haru_Join()}
    set {_join = newValue}
  }
  /// Returns true if `join` has been explicitly set.
  var hasJoin: Bool {return self._join != nil}
  /// Clears the value of `join`. Subsequent reads from it will return its default value.
  mutating func clearJoin() {self._join = nil}

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _join: Haru_Join? = nil
}

struct Haru_JoinReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var join: Haru_Join {
    get {return _join ?? Haru_Join()}
    set {_join = newValue}
  }
  /// Returns true if `join` has been explicitly set.
  var hasJoin: Bool {return self._join != nil}
  /// Clears the value of `join`. Subsequent reads from it will return its default value.
  mutating func clearJoin() {self._join = nil}

  var joins: [Haru_Join] = []

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _join: Haru_Join? = nil
}

struct Haru_Chat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gameID: Int64 = 0

  var accountID: Int64 = 0

  var created: Int64 = 0

  var updated: Int64 = 0

  var chatMessages: [Haru_ChatMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_ChatMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var created: Int64 = 0

  var message: String = String()

  var accountID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_ChatMessageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gameID: Int64 = 0

  var accountID: Int64 = 0

  var chatMessage: Haru_ChatMessage {
    get {return _chatMessage ?? Haru_ChatMessage()}
    set {_chatMessage = newValue}
  }
  /// Returns true if `chatMessage` has been explicitly set.
  var hasChatMessage: Bool {return self._chatMessage != nil}
  /// Clears the value of `chatMessage`. Subsequent reads from it will return its default value.
  mutating func clearChatMessage() {self._chatMessage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _chatMessage: Haru_ChatMessage? = nil
}

struct Haru_ChatRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chat: Haru_Chat {
    get {return _chat ?? Haru_Chat()}
    set {_chat = newValue}
  }
  /// Returns true if `chat` has been explicitly set.
  var hasChat: Bool {return self._chat != nil}
  /// Clears the value of `chat`. Subsequent reads from it will return its default value.
  mutating func clearChat() {self._chat = nil}

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _chat: Haru_Chat? = nil
}

struct Haru_ChatReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chats: [Haru_Chat] = []

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_FilterdArticlesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var category: Int64 = 0

  /// 0 article 1 re_article
  var type: Int64 = 0

  var articleID: Int64 = 0

  var accountID: Int64 = 0

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_FilterdArticlesReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var articles: [Haru_Article] = []

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_ArticleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var article: Haru_Article {
    get {return _article ?? Haru_Article()}
    set {_article = newValue}
  }
  /// Returns true if `article` has been explicitly set.
  var hasArticle: Bool {return self._article != nil}
  /// Clears the value of `article`. Subsequent reads from it will return its default value.
  mutating func clearArticle() {self._article = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _article: Haru_Article? = nil
}

struct Haru_ArticleReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var article: Haru_Article {
    get {return _article ?? Haru_Article()}
    set {_article = newValue}
  }
  /// Returns true if `article` has been explicitly set.
  var hasArticle: Bool {return self._article != nil}
  /// Clears the value of `article`. Subsequent reads from it will return its default value.
  mutating func clearArticle() {self._article = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _article: Haru_Article? = nil
}

struct Haru_LikeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var like: Haru_Like {
    get {return _like ?? Haru_Like()}
    set {_like = newValue}
  }
  /// Returns true if `like` has been explicitly set.
  var hasLike: Bool {return self._like != nil}
  /// Clears the value of `like`. Subsequent reads from it will return its default value.
  mutating func clearLike() {self._like = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _like: Haru_Like? = nil
}

struct Haru_LikeReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var like: Haru_Like {
    get {return _like ?? Haru_Like()}
    set {_like = newValue}
  }
  /// Returns true if `like` has been explicitly set.
  var hasLike: Bool {return self._like != nil}
  /// Clears the value of `like`. Subsequent reads from it will return its default value.
  mutating func clearLike() {self._like = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _like: Haru_Like? = nil
}

/// 좋아요한 목록 관리
struct Haru_FilterdLikesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Int64 = 0

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_FilterdLikesReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var likes: [Haru_Article] = []

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 카운팅 레디스 개념으로 사용
struct Haru_Count {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foreginID: Int64 = 0

  var count: Int64 = 0

  var kind: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_Article {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var created: Int64 = 0

  var updated: Int64 = 0

  var title: String = String()

  var body: String = String()

  /// 분류
  var category: Int64 = 0

  /// 0 기본 1 밴
  var status: Int64 = 0

  /// 게시자 계정 아이디
  var accountID: Int64 = 0

  /// 0 기본 1 대댓
  var type: Int64 = 0

  /// 대댓인 경우
  var foreginID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_Like {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  /// article_id or game_id
  var foreginID: Int64 = 0

  /// 좋아요한 계정 아이디
  var accountID: Int64 = 0

  var created: Int64 = 0

  /// 0 기본 1 밴
  var status: Int64 = 0

  var foreginAccountID: Int64 = 0

  var title: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_Game {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var hostAccountID: Int64 {
    get {return _storage._hostAccountID}
    set {_uniqueStorage()._hostAccountID = newValue}
  }

  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  var price: Int64 {
    get {return _storage._price}
    set {_uniqueStorage()._price = newValue}
  }

  var typePlay: Int64 {
    get {return _storage._typePlay}
    set {_uniqueStorage()._typePlay = newValue}
  }

  var typeAge: Int64 {
    get {return _storage._typeAge}
    set {_uniqueStorage()._typeAge = newValue}
  }

  var typeSex: Int64 {
    get {return _storage._typeSex}
    set {_uniqueStorage()._typeSex = newValue}
  }

  var typeScore: Int64 {
    get {return _storage._typeScore}
    set {_uniqueStorage()._typeScore = newValue}
  }

  var typeYears: Int64 {
    get {return _storage._typeYears}
    set {_uniqueStorage()._typeYears = newValue}
  }

  var typeHole: Int64 {
    get {return _storage._typeHole}
    set {_uniqueStorage()._typeHole = newValue}
  }

  var personMax: Int64 {
    get {return _storage._personMax}
    set {_uniqueStorage()._personMax = newValue}
  }

  var person: Int64 {
    get {return _storage._person}
    set {_uniqueStorage()._person = newValue}
  }

  var decs: String {
    get {return _storage._decs}
    set {_uniqueStorage()._decs = newValue}
  }

  var place: Haru_Place {
    get {return _storage._place ?? Haru_Place()}
    set {_uniqueStorage()._place = newValue}
  }
  /// Returns true if `place` has been explicitly set.
  var hasPlace: Bool {return _storage._place != nil}
  /// Clears the value of `place`. Subsequent reads from it will return its default value.
  mutating func clearPlace() {_uniqueStorage()._place = nil}

  /// for filter
  var shortAddress: String {
    get {return _storage._shortAddress}
    set {_uniqueStorage()._shortAddress = newValue}
  }

  var acceptAccountIds: [Int64] {
    get {return _storage._acceptAccountIds}
    set {_uniqueStorage()._acceptAccountIds = newValue}
  }

  var rejectAccountIds: [Int64] {
    get {return _storage._rejectAccountIds}
    set {_uniqueStorage()._rejectAccountIds = newValue}
  }

  /// for dorder
  var created: Int64 {
    get {return _storage._created}
    set {_uniqueStorage()._created = newValue}
  }

  var updated: Int64 {
    get {return _storage._updated}
    set {_uniqueStorage()._updated = newValue}
  }

  var placeName: String {
    get {return _storage._placeName}
    set {_uniqueStorage()._placeName = newValue}
  }

  var placeAddress: String {
    get {return _storage._placeAddress}
    set {_uniqueStorage()._placeAddress = newValue}
  }

  var placeID: String {
    get {return _storage._placeID}
    set {_uniqueStorage()._placeID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Haru_Place {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var address: String = String()

  var placeID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_GameMultiRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gameIds: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_GameMultiReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var games: [Haru_Game] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_GameRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var game: Haru_Game {
    get {return _game ?? Haru_Game()}
    set {_game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  var hasGame: Bool {return self._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  mutating func clearGame() {self._game = nil}

  var join: Haru_Join {
    get {return _join ?? Haru_Join()}
    set {_join = newValue}
  }
  /// Returns true if `join` has been explicitly set.
  var hasJoin: Bool {return self._join != nil}
  /// Clears the value of `join`. Subsequent reads from it will return its default value.
  mutating func clearJoin() {self._join = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _game: Haru_Game? = nil
  fileprivate var _join: Haru_Join? = nil
}

struct Haru_GameReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var game: Haru_Game {
    get {return _game ?? Haru_Game()}
    set {_game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  var hasGame: Bool {return self._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  mutating func clearGame() {self._game = nil}

  var join: Haru_Join {
    get {return _join ?? Haru_Join()}
    set {_join = newValue}
  }
  /// Returns true if `join` has been explicitly set.
  var hasJoin: Bool {return self._join != nil}
  /// Clears the value of `join`. Subsequent reads from it will return its default value.
  mutating func clearJoin() {self._join = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _game: Haru_Game? = nil
  fileprivate var _join: Haru_Join? = nil
}

struct Haru_FilterdGamesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isInit: Bool = false

  var timeMin: Int64 = 0

  var timeMax: Int64 = 0

  var typeOrder: Int64 = 0

  var typeFilter: Int64 = 0

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_FilterdGamesReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var games: [Haru_Game] = []

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_DataPlaceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Haru_DataPlaceReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: Int64 = 0

  var time: Int64 = 0

  var names: [String] = []

  var address: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Haru_Account: @unchecked Sendable {}
extension Haru_AccountRequest: @unchecked Sendable {}
extension Haru_AccountReply: @unchecked Sendable {}
extension Haru_Profile: @unchecked Sendable {}
extension Haru_ProfileRequest: @unchecked Sendable {}
extension Haru_ProfileReply: @unchecked Sendable {}
extension Haru_Join: @unchecked Sendable {}
extension Haru_JoinRequest: @unchecked Sendable {}
extension Haru_JoinReply: @unchecked Sendable {}
extension Haru_Chat: @unchecked Sendable {}
extension Haru_ChatMessage: @unchecked Sendable {}
extension Haru_ChatMessageRequest: @unchecked Sendable {}
extension Haru_ChatRequest: @unchecked Sendable {}
extension Haru_ChatReply: @unchecked Sendable {}
extension Haru_FilterdArticlesRequest: @unchecked Sendable {}
extension Haru_FilterdArticlesReply: @unchecked Sendable {}
extension Haru_ArticleRequest: @unchecked Sendable {}
extension Haru_ArticleReply: @unchecked Sendable {}
extension Haru_LikeRequest: @unchecked Sendable {}
extension Haru_LikeReply: @unchecked Sendable {}
extension Haru_FilterdLikesRequest: @unchecked Sendable {}
extension Haru_FilterdLikesReply: @unchecked Sendable {}
extension Haru_Count: @unchecked Sendable {}
extension Haru_Article: @unchecked Sendable {}
extension Haru_Like: @unchecked Sendable {}
extension Haru_Game: @unchecked Sendable {}
extension Haru_Place: @unchecked Sendable {}
extension Haru_GameMultiRequest: @unchecked Sendable {}
extension Haru_GameMultiReply: @unchecked Sendable {}
extension Haru_GameRequest: @unchecked Sendable {}
extension Haru_GameReply: @unchecked Sendable {}
extension Haru_FilterdGamesRequest: @unchecked Sendable {}
extension Haru_FilterdGamesReply: @unchecked Sendable {}
extension Haru_DataPlaceRequest: @unchecked Sendable {}
extension Haru_DataPlaceReply: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "haru"

extension Haru_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Account"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "platform_id"),
    3: .same(proto: "platform"),
    4: .standard(proto: "register_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.platformID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.registerTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.platformID.isEmpty {
      try visitor.visitSingularStringField(value: self.platformID, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    if self.registerTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.registerTimestamp, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Account, rhs: Haru_Account) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.platformID != rhs.platformID {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.registerTimestamp != rhs.registerTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_AccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "platform_id"),
    3: .same(proto: "platform"),
    4: .standard(proto: "register_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.platformID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.registerTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.platformID.isEmpty {
      try visitor.visitSingularStringField(value: self.platformID, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    if self.registerTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.registerTimestamp, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_AccountRequest, rhs: Haru_AccountRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.platformID != rhs.platformID {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.registerTimestamp != rhs.registerTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_AccountReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "platform_id"),
    3: .same(proto: "platform"),
    4: .standard(proto: "register_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.platformID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.registerTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.platformID.isEmpty {
      try visitor.visitSingularStringField(value: self.platformID, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    if self.registerTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.registerTimestamp, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_AccountReply, rhs: Haru_AccountReply) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.platformID != rhs.platformID {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.registerTimestamp != rhs.registerTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Profile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Profile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "name"),
    3: .same(proto: "age"),
    4: .same(proto: "sex"),
    5: .same(proto: "score"),
    6: .same(proto: "years"),
    7: .same(proto: "games"),
    8: .same(proto: "desc"),
    9: .standard(proto: "apns_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.accountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.age) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.sex) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.score) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.years) }()
      case 7: try { try decoder.decodeRepeatedInt64Field(value: &self.games) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.apnsToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.accountID != 0 {
      try visitor.visitSingularInt64Field(value: self.accountID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.age != 0 {
      try visitor.visitSingularInt64Field(value: self.age, fieldNumber: 3)
    }
    if self.sex != 0 {
      try visitor.visitSingularInt64Field(value: self.sex, fieldNumber: 4)
    }
    if self.score != 0 {
      try visitor.visitSingularInt64Field(value: self.score, fieldNumber: 5)
    }
    if self.years != 0 {
      try visitor.visitSingularInt64Field(value: self.years, fieldNumber: 6)
    }
    if !self.games.isEmpty {
      try visitor.visitPackedInt64Field(value: self.games, fieldNumber: 7)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 8)
    }
    if !self.apnsToken.isEmpty {
      try visitor.visitSingularStringField(value: self.apnsToken, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Profile, rhs: Haru_Profile) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.age != rhs.age {return false}
    if lhs.sex != rhs.sex {return false}
    if lhs.score != rhs.score {return false}
    if lhs.years != rhs.years {return false}
    if lhs.games != rhs.games {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.apnsToken != rhs.apnsToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_ProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProfileRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profile"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._profile) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._profile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_ProfileRequest, rhs: Haru_ProfileRequest) -> Bool {
    if lhs._profile != rhs._profile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_ProfileReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProfileReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profile"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._profile) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._profile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_ProfileReply, rhs: Haru_ProfileReply) -> Bool {
    if lhs._profile != rhs._profile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Join: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Join"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .standard(proto: "account_id"),
    3: .same(proto: "status"),
    4: .same(proto: "created"),
    5: .same(proto: "updated"),
    6: .standard(proto: "join_id"),
    7: .same(proto: "start"),
    8: .same(proto: "review"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.gameID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.accountID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.status) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.created) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.updated) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.joinID) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.start) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.review) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.gameID != 0 {
      try visitor.visitSingularInt64Field(value: self.gameID, fieldNumber: 1)
    }
    if self.accountID != 0 {
      try visitor.visitSingularInt64Field(value: self.accountID, fieldNumber: 2)
    }
    if self.status != 0 {
      try visitor.visitSingularInt64Field(value: self.status, fieldNumber: 3)
    }
    if self.created != 0 {
      try visitor.visitSingularInt64Field(value: self.created, fieldNumber: 4)
    }
    if self.updated != 0 {
      try visitor.visitSingularInt64Field(value: self.updated, fieldNumber: 5)
    }
    if self.joinID != 0 {
      try visitor.visitSingularInt64Field(value: self.joinID, fieldNumber: 6)
    }
    if self.start != 0 {
      try visitor.visitSingularInt64Field(value: self.start, fieldNumber: 7)
    }
    if !self.review.isEmpty {
      try visitor.visitSingularStringField(value: self.review, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Join, rhs: Haru_Join) -> Bool {
    if lhs.gameID != rhs.gameID {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.created != rhs.created {return false}
    if lhs.updated != rhs.updated {return false}
    if lhs.joinID != rhs.joinID {return false}
    if lhs.start != rhs.start {return false}
    if lhs.review != rhs.review {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_JoinRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "join"),
    2: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._join) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._join {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_JoinRequest, rhs: Haru_JoinRequest) -> Bool {
    if lhs._join != rhs._join {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_JoinReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "join"),
    2: .same(proto: "joins"),
    3: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._join) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.joins) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._join {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.joins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.joins, fieldNumber: 2)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_JoinReply, rhs: Haru_JoinReply) -> Bool {
    if lhs._join != rhs._join {return false}
    if lhs.joins != rhs.joins {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Chat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .standard(proto: "account_id"),
    3: .same(proto: "created"),
    4: .same(proto: "updated"),
    5: .standard(proto: "chat_messages"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.gameID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.accountID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.created) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.updated) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.chatMessages) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.gameID != 0 {
      try visitor.visitSingularInt64Field(value: self.gameID, fieldNumber: 1)
    }
    if self.accountID != 0 {
      try visitor.visitSingularInt64Field(value: self.accountID, fieldNumber: 2)
    }
    if self.created != 0 {
      try visitor.visitSingularInt64Field(value: self.created, fieldNumber: 3)
    }
    if self.updated != 0 {
      try visitor.visitSingularInt64Field(value: self.updated, fieldNumber: 4)
    }
    if !self.chatMessages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chatMessages, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Chat, rhs: Haru_Chat) -> Bool {
    if lhs.gameID != rhs.gameID {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.created != rhs.created {return false}
    if lhs.updated != rhs.updated {return false}
    if lhs.chatMessages != rhs.chatMessages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_ChatMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "created"),
    2: .same(proto: "message"),
    3: .standard(proto: "account_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.created) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.accountID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.created != 0 {
      try visitor.visitSingularInt64Field(value: self.created, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.accountID != 0 {
      try visitor.visitSingularInt64Field(value: self.accountID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_ChatMessage, rhs: Haru_ChatMessage) -> Bool {
    if lhs.created != rhs.created {return false}
    if lhs.message != rhs.message {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_ChatMessageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatMessageRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .standard(proto: "account_id"),
    3: .standard(proto: "chat_message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.gameID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.accountID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._chatMessage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.gameID != 0 {
      try visitor.visitSingularInt64Field(value: self.gameID, fieldNumber: 1)
    }
    if self.accountID != 0 {
      try visitor.visitSingularInt64Field(value: self.accountID, fieldNumber: 2)
    }
    try { if let v = self._chatMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_ChatMessageRequest, rhs: Haru_ChatMessageRequest) -> Bool {
    if lhs.gameID != rhs.gameID {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs._chatMessage != rhs._chatMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_ChatRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chat"),
    2: .same(proto: "Cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._chat) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._chat {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_ChatRequest, rhs: Haru_ChatRequest) -> Bool {
    if lhs._chat != rhs._chat {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_ChatReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chats"),
    2: .same(proto: "Cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.chats) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chats, fieldNumber: 1)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_ChatReply, rhs: Haru_ChatReply) -> Bool {
    if lhs.chats != rhs.chats {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_FilterdArticlesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FilterdArticlesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "category"),
    2: .same(proto: "type"),
    3: .standard(proto: "article_id"),
    4: .standard(proto: "account_id"),
    5: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.category) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.type) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.articleID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.accountID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.category != 0 {
      try visitor.visitSingularInt64Field(value: self.category, fieldNumber: 1)
    }
    if self.type != 0 {
      try visitor.visitSingularInt64Field(value: self.type, fieldNumber: 2)
    }
    if self.articleID != 0 {
      try visitor.visitSingularInt64Field(value: self.articleID, fieldNumber: 3)
    }
    if self.accountID != 0 {
      try visitor.visitSingularInt64Field(value: self.accountID, fieldNumber: 4)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_FilterdArticlesRequest, rhs: Haru_FilterdArticlesRequest) -> Bool {
    if lhs.category != rhs.category {return false}
    if lhs.type != rhs.type {return false}
    if lhs.articleID != rhs.articleID {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_FilterdArticlesReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FilterdArticlesReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "articles"),
    2: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.articles) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.articles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.articles, fieldNumber: 1)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_FilterdArticlesReply, rhs: Haru_FilterdArticlesReply) -> Bool {
    if lhs.articles != rhs.articles {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_ArticleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ArticleRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "article"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._article) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._article {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_ArticleRequest, rhs: Haru_ArticleRequest) -> Bool {
    if lhs._article != rhs._article {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_ArticleReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ArticleReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "article"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._article) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._article {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_ArticleReply, rhs: Haru_ArticleReply) -> Bool {
    if lhs._article != rhs._article {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_LikeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LikeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "like"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._like) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._like {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_LikeRequest, rhs: Haru_LikeRequest) -> Bool {
    if lhs._like != rhs._like {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_LikeReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LikeReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "like"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._like) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._like {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_LikeReply, rhs: Haru_LikeReply) -> Bool {
    if lhs._like != rhs._like {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_FilterdLikesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FilterdLikesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != 0 {
      try visitor.visitSingularInt64Field(value: self.type, fieldNumber: 1)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_FilterdLikesRequest, rhs: Haru_FilterdLikesRequest) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_FilterdLikesReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FilterdLikesReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "likes"),
    2: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.likes) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.likes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.likes, fieldNumber: 1)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_FilterdLikesReply, rhs: Haru_FilterdLikesReply) -> Bool {
    if lhs.likes != rhs.likes {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Count: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Count"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foregin_id"),
    2: .same(proto: "count"),
    3: .same(proto: "kind"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.foreginID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.count) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.kind) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.foreginID != 0 {
      try visitor.visitSingularInt64Field(value: self.foreginID, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 2)
    }
    if !self.kind.isEmpty {
      try visitor.visitSingularStringField(value: self.kind, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Count, rhs: Haru_Count) -> Bool {
    if lhs.foreginID != rhs.foreginID {return false}
    if lhs.count != rhs.count {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Article: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Article"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "created"),
    3: .same(proto: "updated"),
    4: .same(proto: "title"),
    5: .same(proto: "body"),
    6: .same(proto: "category"),
    7: .same(proto: "status"),
    8: .standard(proto: "account_id"),
    9: .same(proto: "type"),
    10: .standard(proto: "foregin_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.created) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.updated) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.body) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.category) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.status) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.accountID) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.type) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.foreginID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.created != 0 {
      try visitor.visitSingularInt64Field(value: self.created, fieldNumber: 2)
    }
    if self.updated != 0 {
      try visitor.visitSingularInt64Field(value: self.updated, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 5)
    }
    if self.category != 0 {
      try visitor.visitSingularInt64Field(value: self.category, fieldNumber: 6)
    }
    if self.status != 0 {
      try visitor.visitSingularInt64Field(value: self.status, fieldNumber: 7)
    }
    if self.accountID != 0 {
      try visitor.visitSingularInt64Field(value: self.accountID, fieldNumber: 8)
    }
    if self.type != 0 {
      try visitor.visitSingularInt64Field(value: self.type, fieldNumber: 9)
    }
    if self.foreginID != 0 {
      try visitor.visitSingularInt64Field(value: self.foreginID, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Article, rhs: Haru_Article) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.created != rhs.created {return false}
    if lhs.updated != rhs.updated {return false}
    if lhs.title != rhs.title {return false}
    if lhs.body != rhs.body {return false}
    if lhs.category != rhs.category {return false}
    if lhs.status != rhs.status {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.foreginID != rhs.foreginID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Like: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Like"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "foregin_id"),
    3: .standard(proto: "account_id"),
    4: .same(proto: "created"),
    5: .same(proto: "status"),
    6: .standard(proto: "foregin_account_id"),
    7: .same(proto: "title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.foreginID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.accountID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.created) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.status) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.foreginAccountID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.foreginID != 0 {
      try visitor.visitSingularInt64Field(value: self.foreginID, fieldNumber: 2)
    }
    if self.accountID != 0 {
      try visitor.visitSingularInt64Field(value: self.accountID, fieldNumber: 3)
    }
    if self.created != 0 {
      try visitor.visitSingularInt64Field(value: self.created, fieldNumber: 4)
    }
    if self.status != 0 {
      try visitor.visitSingularInt64Field(value: self.status, fieldNumber: 5)
    }
    if self.foreginAccountID != 0 {
      try visitor.visitSingularInt64Field(value: self.foreginAccountID, fieldNumber: 6)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Like, rhs: Haru_Like) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.foreginID != rhs.foreginID {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.created != rhs.created {return false}
    if lhs.status != rhs.status {return false}
    if lhs.foreginAccountID != rhs.foreginAccountID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Game: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Game"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "host_account_id"),
    3: .same(proto: "time"),
    4: .same(proto: "price"),
    5: .standard(proto: "type_play"),
    6: .standard(proto: "type_age"),
    7: .standard(proto: "type_sex"),
    8: .standard(proto: "type_score"),
    9: .standard(proto: "type_years"),
    10: .standard(proto: "type_hole"),
    11: .standard(proto: "person_max"),
    12: .same(proto: "person"),
    13: .same(proto: "decs"),
    14: .same(proto: "place"),
    15: .standard(proto: "short_address"),
    16: .standard(proto: "accept_account_ids"),
    17: .standard(proto: "reject_account_ids"),
    18: .same(proto: "created"),
    19: .same(proto: "updated"),
    20: .standard(proto: "place_name"),
    21: .standard(proto: "place_address"),
    22: .standard(proto: "place_id"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _hostAccountID: Int64 = 0
    var _time: Int64 = 0
    var _price: Int64 = 0
    var _typePlay: Int64 = 0
    var _typeAge: Int64 = 0
    var _typeSex: Int64 = 0
    var _typeScore: Int64 = 0
    var _typeYears: Int64 = 0
    var _typeHole: Int64 = 0
    var _personMax: Int64 = 0
    var _person: Int64 = 0
    var _decs: String = String()
    var _place: Haru_Place? = nil
    var _shortAddress: String = String()
    var _acceptAccountIds: [Int64] = []
    var _rejectAccountIds: [Int64] = []
    var _created: Int64 = 0
    var _updated: Int64 = 0
    var _placeName: String = String()
    var _placeAddress: String = String()
    var _placeID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _hostAccountID = source._hostAccountID
      _time = source._time
      _price = source._price
      _typePlay = source._typePlay
      _typeAge = source._typeAge
      _typeSex = source._typeSex
      _typeScore = source._typeScore
      _typeYears = source._typeYears
      _typeHole = source._typeHole
      _personMax = source._personMax
      _person = source._person
      _decs = source._decs
      _place = source._place
      _shortAddress = source._shortAddress
      _acceptAccountIds = source._acceptAccountIds
      _rejectAccountIds = source._rejectAccountIds
      _created = source._created
      _updated = source._updated
      _placeName = source._placeName
      _placeAddress = source._placeAddress
      _placeID = source._placeID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._hostAccountID) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._time) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._price) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._typePlay) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._typeAge) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._typeSex) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._typeScore) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._typeYears) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._typeHole) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._personMax) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._person) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._decs) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._place) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._shortAddress) }()
        case 16: try { try decoder.decodeRepeatedInt64Field(value: &_storage._acceptAccountIds) }()
        case 17: try { try decoder.decodeRepeatedInt64Field(value: &_storage._rejectAccountIds) }()
        case 18: try { try decoder.decodeSingularInt64Field(value: &_storage._created) }()
        case 19: try { try decoder.decodeSingularInt64Field(value: &_storage._updated) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._placeName) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._placeAddress) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._placeID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._hostAccountID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._hostAccountID, fieldNumber: 2)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 3)
      }
      if _storage._price != 0 {
        try visitor.visitSingularInt64Field(value: _storage._price, fieldNumber: 4)
      }
      if _storage._typePlay != 0 {
        try visitor.visitSingularInt64Field(value: _storage._typePlay, fieldNumber: 5)
      }
      if _storage._typeAge != 0 {
        try visitor.visitSingularInt64Field(value: _storage._typeAge, fieldNumber: 6)
      }
      if _storage._typeSex != 0 {
        try visitor.visitSingularInt64Field(value: _storage._typeSex, fieldNumber: 7)
      }
      if _storage._typeScore != 0 {
        try visitor.visitSingularInt64Field(value: _storage._typeScore, fieldNumber: 8)
      }
      if _storage._typeYears != 0 {
        try visitor.visitSingularInt64Field(value: _storage._typeYears, fieldNumber: 9)
      }
      if _storage._typeHole != 0 {
        try visitor.visitSingularInt64Field(value: _storage._typeHole, fieldNumber: 10)
      }
      if _storage._personMax != 0 {
        try visitor.visitSingularInt64Field(value: _storage._personMax, fieldNumber: 11)
      }
      if _storage._person != 0 {
        try visitor.visitSingularInt64Field(value: _storage._person, fieldNumber: 12)
      }
      if !_storage._decs.isEmpty {
        try visitor.visitSingularStringField(value: _storage._decs, fieldNumber: 13)
      }
      try { if let v = _storage._place {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      if !_storage._shortAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shortAddress, fieldNumber: 15)
      }
      if !_storage._acceptAccountIds.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._acceptAccountIds, fieldNumber: 16)
      }
      if !_storage._rejectAccountIds.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._rejectAccountIds, fieldNumber: 17)
      }
      if _storage._created != 0 {
        try visitor.visitSingularInt64Field(value: _storage._created, fieldNumber: 18)
      }
      if _storage._updated != 0 {
        try visitor.visitSingularInt64Field(value: _storage._updated, fieldNumber: 19)
      }
      if !_storage._placeName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._placeName, fieldNumber: 20)
      }
      if !_storage._placeAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._placeAddress, fieldNumber: 21)
      }
      if !_storage._placeID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._placeID, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Game, rhs: Haru_Game) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._hostAccountID != rhs_storage._hostAccountID {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._typePlay != rhs_storage._typePlay {return false}
        if _storage._typeAge != rhs_storage._typeAge {return false}
        if _storage._typeSex != rhs_storage._typeSex {return false}
        if _storage._typeScore != rhs_storage._typeScore {return false}
        if _storage._typeYears != rhs_storage._typeYears {return false}
        if _storage._typeHole != rhs_storage._typeHole {return false}
        if _storage._personMax != rhs_storage._personMax {return false}
        if _storage._person != rhs_storage._person {return false}
        if _storage._decs != rhs_storage._decs {return false}
        if _storage._place != rhs_storage._place {return false}
        if _storage._shortAddress != rhs_storage._shortAddress {return false}
        if _storage._acceptAccountIds != rhs_storage._acceptAccountIds {return false}
        if _storage._rejectAccountIds != rhs_storage._rejectAccountIds {return false}
        if _storage._created != rhs_storage._created {return false}
        if _storage._updated != rhs_storage._updated {return false}
        if _storage._placeName != rhs_storage._placeName {return false}
        if _storage._placeAddress != rhs_storage._placeAddress {return false}
        if _storage._placeID != rhs_storage._placeID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_Place: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Place"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "address"),
    3: .standard(proto: "place_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.placeID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if !self.placeID.isEmpty {
      try visitor.visitSingularStringField(value: self.placeID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_Place, rhs: Haru_Place) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.address != rhs.address {return false}
    if lhs.placeID != rhs.placeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_GameMultiRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GameMultiRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.gameIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.gameIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_GameMultiRequest, rhs: Haru_GameMultiRequest) -> Bool {
    if lhs.gameIds != rhs.gameIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_GameMultiReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GameMultiReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "games"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.games) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.games.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.games, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_GameMultiReply, rhs: Haru_GameMultiReply) -> Bool {
    if lhs.games != rhs.games {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_GameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GameRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "game"),
    2: .same(proto: "join"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._game) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._join) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._game {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._join {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_GameRequest, rhs: Haru_GameRequest) -> Bool {
    if lhs._game != rhs._game {return false}
    if lhs._join != rhs._join {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_GameReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GameReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "game"),
    2: .same(proto: "join"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._game) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._join) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._game {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._join {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_GameReply, rhs: Haru_GameReply) -> Bool {
    if lhs._game != rhs._game {return false}
    if lhs._join != rhs._join {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_FilterdGamesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FilterdGamesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_init"),
    2: .standard(proto: "time_min"),
    3: .standard(proto: "time_max"),
    4: .standard(proto: "type_order"),
    5: .standard(proto: "type_filter"),
    6: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isInit) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.timeMin) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.timeMax) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.typeOrder) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.typeFilter) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isInit != false {
      try visitor.visitSingularBoolField(value: self.isInit, fieldNumber: 1)
    }
    if self.timeMin != 0 {
      try visitor.visitSingularInt64Field(value: self.timeMin, fieldNumber: 2)
    }
    if self.timeMax != 0 {
      try visitor.visitSingularInt64Field(value: self.timeMax, fieldNumber: 3)
    }
    if self.typeOrder != 0 {
      try visitor.visitSingularInt64Field(value: self.typeOrder, fieldNumber: 4)
    }
    if self.typeFilter != 0 {
      try visitor.visitSingularInt64Field(value: self.typeFilter, fieldNumber: 5)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_FilterdGamesRequest, rhs: Haru_FilterdGamesRequest) -> Bool {
    if lhs.isInit != rhs.isInit {return false}
    if lhs.timeMin != rhs.timeMin {return false}
    if lhs.timeMax != rhs.timeMax {return false}
    if lhs.typeOrder != rhs.typeOrder {return false}
    if lhs.typeFilter != rhs.typeFilter {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_FilterdGamesReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FilterdGamesReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "games"),
    2: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.games) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.games.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.games, fieldNumber: 1)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_FilterdGamesReply, rhs: Haru_FilterdGamesReply) -> Bool {
    if lhs.games != rhs.games {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_DataPlaceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataPlaceRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt64Field(value: self.version, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_DataPlaceRequest, rhs: Haru_DataPlaceRequest) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Haru_DataPlaceReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataPlaceReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "time"),
    3: .same(proto: "names"),
    4: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.time) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.names) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.address) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt64Field(value: self.version, fieldNumber: 1)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 2)
    }
    if !self.names.isEmpty {
      try visitor.visitRepeatedStringField(value: self.names, fieldNumber: 3)
    }
    if !self.address.isEmpty {
      try visitor.visitRepeatedStringField(value: self.address, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Haru_DataPlaceReply, rhs: Haru_DataPlaceReply) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.time != rhs.time {return false}
    if lhs.names != rhs.names {return false}
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
