//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: proto/haru.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service definition.
///
/// Usage: instantiate `Haru_version1Client`, then call methods of this protocol to make API calls.
internal protocol Haru_version1ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Haru_version1ClientInterceptorFactoryProtocol? { get }

  func createAccount(
    _ request: Haru_AccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_AccountRequest, Haru_AccountReply>

  func getProfile(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_ProfileRequest, Haru_ProfileReply>

  func updateProfile(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_ProfileRequest, Haru_ProfileReply>

  func createGame(
    _ request: Haru_GameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_GameRequest, Haru_GameReply>

  func updateGame(
    _ request: Haru_GameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_GameRequest, Haru_GameReply>

  func getGame(
    _ request: Haru_GameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_GameRequest, Haru_GameReply>

  func getGameMulti(
    _ request: Haru_GameMultiRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_GameMultiRequest, Haru_GameMultiReply>

  func getFilterdGames(
    _ request: Haru_FilterdGamesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_FilterdGamesRequest, Haru_FilterdGamesReply>

  func join(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_JoinRequest, Haru_JoinReply>

  func getMyJoins(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_JoinRequest, Haru_JoinReply>

  func getMyBeforeJoins(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_JoinRequest, Haru_JoinReply>

  func getGameJoins(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_JoinRequest, Haru_JoinReply>

  func updateJoin(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_JoinRequest, Haru_JoinReply>

  func getChat(
    _ request: Haru_ChatRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_ChatRequest, Haru_ChatReply>

  func addChatMessage(
    _ request: Haru_ChatMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_ChatMessageRequest, Haru_ChatReply>

  func getFilterdArticles(
    _ request: Haru_FilterdArticlesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_FilterdArticlesRequest, Haru_FilterdArticlesReply>

  func createArticle(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_ArticleRequest, Haru_ArticleReply>

  func updateArticle(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_ArticleRequest, Haru_ArticleReply>

  func getFilterdLikes(
    _ request: Haru_FilterdLikesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_FilterdLikesRequest, Haru_FilterdLikesRequest>

  func createLike(
    _ request: Haru_LikeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_LikeRequest, Haru_LikeReply>

  func updateLike(
    _ request: Haru_LikeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_LikeRequest, Haru_LikeReply>

  func getCount(
    _ request: Haru_Count,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_Count, Haru_Count>

  func getPlaceKaKao(
    _ request: Haru_PlaceKakaoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_PlaceKakaoRequest, Haru_PlaceKakaoReply>

  func getEtcd(
    _ request: Haru_EtcdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_EtcdRequest, Haru_EtcdReply>

  func deleteGame(
    _ request: Haru_GameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_GameRequest, Haru_GameReply>

  func deleteArticle(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Haru_ArticleRequest, Haru_ArticleReply>
}

extension Haru_version1ClientProtocol {
  internal var serviceName: String {
    return "haru.version1"
  }

  /// Unary call to CreateAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAccount(
    _ request: Haru_AccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_AccountRequest, Haru_AccountReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? []
    )
  }

  /// Unary call to GetProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProfile(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_ProfileRequest, Haru_ProfileReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProfileInterceptors() ?? []
    )
  }

  /// Unary call to UpdateProfile
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateProfile(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_ProfileRequest, Haru_ProfileReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? []
    )
  }

  /// Unary call to CreateGame
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGame.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGame(
    _ request: Haru_GameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_GameRequest, Haru_GameReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGameInterceptors() ?? []
    )
  }

  /// Unary call to UpdateGame
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGame.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGame(
    _ request: Haru_GameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_GameRequest, Haru_GameReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGameInterceptors() ?? []
    )
  }

  /// Unary call to GetGame
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGame.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getGame(
    _ request: Haru_GameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_GameRequest, Haru_GameReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGameInterceptors() ?? []
    )
  }

  /// Unary call to GetGameMulti
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGameMulti.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getGameMulti(
    _ request: Haru_GameMultiRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_GameMultiRequest, Haru_GameMultiReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getGameMulti.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGameMultiInterceptors() ?? []
    )
  }

  /// Unary call to GetFilterdGames
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFilterdGames.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFilterdGames(
    _ request: Haru_FilterdGamesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_FilterdGamesRequest, Haru_FilterdGamesReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getFilterdGames.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFilterdGamesInterceptors() ?? []
    )
  }

  /// Unary call to Join
  ///
  /// - Parameters:
  ///   - request: Request to send to Join.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func join(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_JoinRequest, Haru_JoinReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.join.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinInterceptors() ?? []
    )
  }

  /// Unary call to GetMyJoins
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMyJoins.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMyJoins(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_JoinRequest, Haru_JoinReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getMyJoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyJoinsInterceptors() ?? []
    )
  }

  /// Unary call to GetMyBeforeJoins
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMyBeforeJoins.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMyBeforeJoins(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_JoinRequest, Haru_JoinReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getMyBeforeJoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyBeforeJoinsInterceptors() ?? []
    )
  }

  /// Unary call to GetGameJoins
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGameJoins.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getGameJoins(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_JoinRequest, Haru_JoinReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getGameJoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGameJoinsInterceptors() ?? []
    )
  }

  /// Unary call to UpdateJoin
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateJoin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateJoin(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_JoinRequest, Haru_JoinReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateJoin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateJoinInterceptors() ?? []
    )
  }

  /// Unary call to GetChat
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChat.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getChat(
    _ request: Haru_ChatRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_ChatRequest, Haru_ChatReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getChat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatInterceptors() ?? []
    )
  }

  /// Unary call to AddChatMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to AddChatMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addChatMessage(
    _ request: Haru_ChatMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_ChatMessageRequest, Haru_ChatReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.addChatMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddChatMessageInterceptors() ?? []
    )
  }

  /// Unary call to GetFilterdArticles
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFilterdArticles.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFilterdArticles(
    _ request: Haru_FilterdArticlesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_FilterdArticlesRequest, Haru_FilterdArticlesReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getFilterdArticles.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFilterdArticlesInterceptors() ?? []
    )
  }

  /// Unary call to CreateArticle
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateArticle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createArticle(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_ArticleRequest, Haru_ArticleReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createArticle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateArticleInterceptors() ?? []
    )
  }

  /// Unary call to UpdateArticle
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateArticle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateArticle(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_ArticleRequest, Haru_ArticleReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateArticle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateArticleInterceptors() ?? []
    )
  }

  /// Unary call to GetFilterdLikes
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFilterdLikes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFilterdLikes(
    _ request: Haru_FilterdLikesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_FilterdLikesRequest, Haru_FilterdLikesRequest> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getFilterdLikes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFilterdLikesInterceptors() ?? []
    )
  }

  /// Unary call to CreateLike
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateLike.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createLike(
    _ request: Haru_LikeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_LikeRequest, Haru_LikeReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createLike.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateLikeInterceptors() ?? []
    )
  }

  /// Unary call to UpdateLike
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateLike.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateLike(
    _ request: Haru_LikeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_LikeRequest, Haru_LikeReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateLike.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateLikeInterceptors() ?? []
    )
  }

  /// Unary call to GetCount
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCount(
    _ request: Haru_Count,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_Count, Haru_Count> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCountInterceptors() ?? []
    )
  }

  /// Unary call to GetPlaceKaKao
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPlaceKaKao.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPlaceKaKao(
    _ request: Haru_PlaceKakaoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_PlaceKakaoRequest, Haru_PlaceKakaoReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getPlaceKaKao.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPlaceKaKaoInterceptors() ?? []
    )
  }

  /// Unary call to GetEtcd
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEtcd.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getEtcd(
    _ request: Haru_EtcdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_EtcdRequest, Haru_EtcdReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getEtcd.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEtcdInterceptors() ?? []
    )
  }

  /// Unary call to DeleteGame
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteGame.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteGame(
    _ request: Haru_GameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_GameRequest, Haru_GameReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.deleteGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteGameInterceptors() ?? []
    )
  }

  /// Unary call to DeleteArticle
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteArticle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteArticle(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Haru_ArticleRequest, Haru_ArticleReply> {
    return self.makeUnaryCall(
      path: Haru_version1ClientMetadata.Methods.deleteArticle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteArticleInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Haru_version1Client: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Haru_version1NIOClient")
internal final class Haru_version1Client: Haru_version1ClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Haru_version1ClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Haru_version1ClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the haru.version1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Haru_version1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Haru_version1NIOClient: Haru_version1ClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Haru_version1ClientInterceptorFactoryProtocol?

  /// Creates a client for the haru.version1 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Haru_version1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Service definition.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Haru_version1AsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Haru_version1ClientInterceptorFactoryProtocol? { get }

  func makeCreateAccountCall(
    _ request: Haru_AccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_AccountRequest, Haru_AccountReply>

  func makeGetProfileCall(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_ProfileRequest, Haru_ProfileReply>

  func makeUpdateProfileCall(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_ProfileRequest, Haru_ProfileReply>

  func makeCreateGameCall(
    _ request: Haru_GameRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_GameRequest, Haru_GameReply>

  func makeUpdateGameCall(
    _ request: Haru_GameRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_GameRequest, Haru_GameReply>

  func makeGetGameCall(
    _ request: Haru_GameRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_GameRequest, Haru_GameReply>

  func makeGetGameMultiCall(
    _ request: Haru_GameMultiRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_GameMultiRequest, Haru_GameMultiReply>

  func makeGetFilterdGamesCall(
    _ request: Haru_FilterdGamesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_FilterdGamesRequest, Haru_FilterdGamesReply>

  func makeJoinCall(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_JoinRequest, Haru_JoinReply>

  func makeGetMyJoinsCall(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_JoinRequest, Haru_JoinReply>

  func makeGetMyBeforeJoinsCall(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_JoinRequest, Haru_JoinReply>

  func makeGetGameJoinsCall(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_JoinRequest, Haru_JoinReply>

  func makeUpdateJoinCall(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_JoinRequest, Haru_JoinReply>

  func makeGetChatCall(
    _ request: Haru_ChatRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_ChatRequest, Haru_ChatReply>

  func makeAddChatMessageCall(
    _ request: Haru_ChatMessageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_ChatMessageRequest, Haru_ChatReply>

  func makeGetFilterdArticlesCall(
    _ request: Haru_FilterdArticlesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_FilterdArticlesRequest, Haru_FilterdArticlesReply>

  func makeCreateArticleCall(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_ArticleRequest, Haru_ArticleReply>

  func makeUpdateArticleCall(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_ArticleRequest, Haru_ArticleReply>

  func makeGetFilterdLikesCall(
    _ request: Haru_FilterdLikesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_FilterdLikesRequest, Haru_FilterdLikesRequest>

  func makeCreateLikeCall(
    _ request: Haru_LikeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_LikeRequest, Haru_LikeReply>

  func makeUpdateLikeCall(
    _ request: Haru_LikeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_LikeRequest, Haru_LikeReply>

  func makeGetCountCall(
    _ request: Haru_Count,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_Count, Haru_Count>

  func makeGetPlaceKaKaoCall(
    _ request: Haru_PlaceKakaoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_PlaceKakaoRequest, Haru_PlaceKakaoReply>

  func makeGetEtcdCall(
    _ request: Haru_EtcdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_EtcdRequest, Haru_EtcdReply>

  func makeDeleteGameCall(
    _ request: Haru_GameRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_GameRequest, Haru_GameReply>

  func makeDeleteArticleCall(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Haru_ArticleRequest, Haru_ArticleReply>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Haru_version1AsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Haru_version1ClientMetadata.serviceDescriptor
  }

  internal var interceptors: Haru_version1ClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateAccountCall(
    _ request: Haru_AccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_AccountRequest, Haru_AccountReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? []
    )
  }

  internal func makeGetProfileCall(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_ProfileRequest, Haru_ProfileReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProfileInterceptors() ?? []
    )
  }

  internal func makeUpdateProfileCall(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_ProfileRequest, Haru_ProfileReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? []
    )
  }

  internal func makeCreateGameCall(
    _ request: Haru_GameRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_GameRequest, Haru_GameReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGameInterceptors() ?? []
    )
  }

  internal func makeUpdateGameCall(
    _ request: Haru_GameRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_GameRequest, Haru_GameReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGameInterceptors() ?? []
    )
  }

  internal func makeGetGameCall(
    _ request: Haru_GameRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_GameRequest, Haru_GameReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGameInterceptors() ?? []
    )
  }

  internal func makeGetGameMultiCall(
    _ request: Haru_GameMultiRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_GameMultiRequest, Haru_GameMultiReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getGameMulti.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGameMultiInterceptors() ?? []
    )
  }

  internal func makeGetFilterdGamesCall(
    _ request: Haru_FilterdGamesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_FilterdGamesRequest, Haru_FilterdGamesReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getFilterdGames.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFilterdGamesInterceptors() ?? []
    )
  }

  internal func makeJoinCall(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_JoinRequest, Haru_JoinReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.join.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinInterceptors() ?? []
    )
  }

  internal func makeGetMyJoinsCall(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_JoinRequest, Haru_JoinReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getMyJoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyJoinsInterceptors() ?? []
    )
  }

  internal func makeGetMyBeforeJoinsCall(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_JoinRequest, Haru_JoinReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getMyBeforeJoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyBeforeJoinsInterceptors() ?? []
    )
  }

  internal func makeGetGameJoinsCall(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_JoinRequest, Haru_JoinReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getGameJoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGameJoinsInterceptors() ?? []
    )
  }

  internal func makeUpdateJoinCall(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_JoinRequest, Haru_JoinReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateJoin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateJoinInterceptors() ?? []
    )
  }

  internal func makeGetChatCall(
    _ request: Haru_ChatRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_ChatRequest, Haru_ChatReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getChat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatInterceptors() ?? []
    )
  }

  internal func makeAddChatMessageCall(
    _ request: Haru_ChatMessageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_ChatMessageRequest, Haru_ChatReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.addChatMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddChatMessageInterceptors() ?? []
    )
  }

  internal func makeGetFilterdArticlesCall(
    _ request: Haru_FilterdArticlesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_FilterdArticlesRequest, Haru_FilterdArticlesReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getFilterdArticles.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFilterdArticlesInterceptors() ?? []
    )
  }

  internal func makeCreateArticleCall(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_ArticleRequest, Haru_ArticleReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createArticle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateArticleInterceptors() ?? []
    )
  }

  internal func makeUpdateArticleCall(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_ArticleRequest, Haru_ArticleReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateArticle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateArticleInterceptors() ?? []
    )
  }

  internal func makeGetFilterdLikesCall(
    _ request: Haru_FilterdLikesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_FilterdLikesRequest, Haru_FilterdLikesRequest> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getFilterdLikes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFilterdLikesInterceptors() ?? []
    )
  }

  internal func makeCreateLikeCall(
    _ request: Haru_LikeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_LikeRequest, Haru_LikeReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createLike.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateLikeInterceptors() ?? []
    )
  }

  internal func makeUpdateLikeCall(
    _ request: Haru_LikeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_LikeRequest, Haru_LikeReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateLike.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateLikeInterceptors() ?? []
    )
  }

  internal func makeGetCountCall(
    _ request: Haru_Count,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_Count, Haru_Count> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCountInterceptors() ?? []
    )
  }

  internal func makeGetPlaceKaKaoCall(
    _ request: Haru_PlaceKakaoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_PlaceKakaoRequest, Haru_PlaceKakaoReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getPlaceKaKao.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPlaceKaKaoInterceptors() ?? []
    )
  }

  internal func makeGetEtcdCall(
    _ request: Haru_EtcdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_EtcdRequest, Haru_EtcdReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getEtcd.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEtcdInterceptors() ?? []
    )
  }

  internal func makeDeleteGameCall(
    _ request: Haru_GameRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_GameRequest, Haru_GameReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.deleteGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteGameInterceptors() ?? []
    )
  }

  internal func makeDeleteArticleCall(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Haru_ArticleRequest, Haru_ArticleReply> {
    return self.makeAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.deleteArticle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteArticleInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Haru_version1AsyncClientProtocol {
  internal func createAccount(
    _ request: Haru_AccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_AccountReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? []
    )
  }

  internal func getProfile(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_ProfileReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProfileInterceptors() ?? []
    )
  }

  internal func updateProfile(
    _ request: Haru_ProfileRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_ProfileReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateProfile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? []
    )
  }

  internal func createGame(
    _ request: Haru_GameRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_GameReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGameInterceptors() ?? []
    )
  }

  internal func updateGame(
    _ request: Haru_GameRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_GameReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGameInterceptors() ?? []
    )
  }

  internal func getGame(
    _ request: Haru_GameRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_GameReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGameInterceptors() ?? []
    )
  }

  internal func getGameMulti(
    _ request: Haru_GameMultiRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_GameMultiReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getGameMulti.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGameMultiInterceptors() ?? []
    )
  }

  internal func getFilterdGames(
    _ request: Haru_FilterdGamesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_FilterdGamesReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getFilterdGames.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFilterdGamesInterceptors() ?? []
    )
  }

  internal func join(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_JoinReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.join.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinInterceptors() ?? []
    )
  }

  internal func getMyJoins(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_JoinReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getMyJoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyJoinsInterceptors() ?? []
    )
  }

  internal func getMyBeforeJoins(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_JoinReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getMyBeforeJoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyBeforeJoinsInterceptors() ?? []
    )
  }

  internal func getGameJoins(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_JoinReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getGameJoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGameJoinsInterceptors() ?? []
    )
  }

  internal func updateJoin(
    _ request: Haru_JoinRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_JoinReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateJoin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateJoinInterceptors() ?? []
    )
  }

  internal func getChat(
    _ request: Haru_ChatRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_ChatReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getChat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatInterceptors() ?? []
    )
  }

  internal func addChatMessage(
    _ request: Haru_ChatMessageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_ChatReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.addChatMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddChatMessageInterceptors() ?? []
    )
  }

  internal func getFilterdArticles(
    _ request: Haru_FilterdArticlesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_FilterdArticlesReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getFilterdArticles.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFilterdArticlesInterceptors() ?? []
    )
  }

  internal func createArticle(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_ArticleReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createArticle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateArticleInterceptors() ?? []
    )
  }

  internal func updateArticle(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_ArticleReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateArticle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateArticleInterceptors() ?? []
    )
  }

  internal func getFilterdLikes(
    _ request: Haru_FilterdLikesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_FilterdLikesRequest {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getFilterdLikes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFilterdLikesInterceptors() ?? []
    )
  }

  internal func createLike(
    _ request: Haru_LikeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_LikeReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.createLike.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateLikeInterceptors() ?? []
    )
  }

  internal func updateLike(
    _ request: Haru_LikeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_LikeReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.updateLike.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateLikeInterceptors() ?? []
    )
  }

  internal func getCount(
    _ request: Haru_Count,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_Count {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCountInterceptors() ?? []
    )
  }

  internal func getPlaceKaKao(
    _ request: Haru_PlaceKakaoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_PlaceKakaoReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getPlaceKaKao.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPlaceKaKaoInterceptors() ?? []
    )
  }

  internal func getEtcd(
    _ request: Haru_EtcdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_EtcdReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.getEtcd.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEtcdInterceptors() ?? []
    )
  }

  internal func deleteGame(
    _ request: Haru_GameRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_GameReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.deleteGame.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteGameInterceptors() ?? []
    )
  }

  internal func deleteArticle(
    _ request: Haru_ArticleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Haru_ArticleReply {
    return try await self.performAsyncUnaryCall(
      path: Haru_version1ClientMetadata.Methods.deleteArticle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteArticleInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Haru_version1AsyncClient: Haru_version1AsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Haru_version1ClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Haru_version1ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Haru_version1ClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'createAccount'.
  func makeCreateAccountInterceptors() -> [ClientInterceptor<Haru_AccountRequest, Haru_AccountReply>]

  /// - Returns: Interceptors to use when invoking 'getProfile'.
  func makeGetProfileInterceptors() -> [ClientInterceptor<Haru_ProfileRequest, Haru_ProfileReply>]

  /// - Returns: Interceptors to use when invoking 'updateProfile'.
  func makeUpdateProfileInterceptors() -> [ClientInterceptor<Haru_ProfileRequest, Haru_ProfileReply>]

  /// - Returns: Interceptors to use when invoking 'createGame'.
  func makeCreateGameInterceptors() -> [ClientInterceptor<Haru_GameRequest, Haru_GameReply>]

  /// - Returns: Interceptors to use when invoking 'updateGame'.
  func makeUpdateGameInterceptors() -> [ClientInterceptor<Haru_GameRequest, Haru_GameReply>]

  /// - Returns: Interceptors to use when invoking 'getGame'.
  func makeGetGameInterceptors() -> [ClientInterceptor<Haru_GameRequest, Haru_GameReply>]

  /// - Returns: Interceptors to use when invoking 'getGameMulti'.
  func makeGetGameMultiInterceptors() -> [ClientInterceptor<Haru_GameMultiRequest, Haru_GameMultiReply>]

  /// - Returns: Interceptors to use when invoking 'getFilterdGames'.
  func makeGetFilterdGamesInterceptors() -> [ClientInterceptor<Haru_FilterdGamesRequest, Haru_FilterdGamesReply>]

  /// - Returns: Interceptors to use when invoking 'join'.
  func makeJoinInterceptors() -> [ClientInterceptor<Haru_JoinRequest, Haru_JoinReply>]

  /// - Returns: Interceptors to use when invoking 'getMyJoins'.
  func makeGetMyJoinsInterceptors() -> [ClientInterceptor<Haru_JoinRequest, Haru_JoinReply>]

  /// - Returns: Interceptors to use when invoking 'getMyBeforeJoins'.
  func makeGetMyBeforeJoinsInterceptors() -> [ClientInterceptor<Haru_JoinRequest, Haru_JoinReply>]

  /// - Returns: Interceptors to use when invoking 'getGameJoins'.
  func makeGetGameJoinsInterceptors() -> [ClientInterceptor<Haru_JoinRequest, Haru_JoinReply>]

  /// - Returns: Interceptors to use when invoking 'updateJoin'.
  func makeUpdateJoinInterceptors() -> [ClientInterceptor<Haru_JoinRequest, Haru_JoinReply>]

  /// - Returns: Interceptors to use when invoking 'getChat'.
  func makeGetChatInterceptors() -> [ClientInterceptor<Haru_ChatRequest, Haru_ChatReply>]

  /// - Returns: Interceptors to use when invoking 'addChatMessage'.
  func makeAddChatMessageInterceptors() -> [ClientInterceptor<Haru_ChatMessageRequest, Haru_ChatReply>]

  /// - Returns: Interceptors to use when invoking 'getFilterdArticles'.
  func makeGetFilterdArticlesInterceptors() -> [ClientInterceptor<Haru_FilterdArticlesRequest, Haru_FilterdArticlesReply>]

  /// - Returns: Interceptors to use when invoking 'createArticle'.
  func makeCreateArticleInterceptors() -> [ClientInterceptor<Haru_ArticleRequest, Haru_ArticleReply>]

  /// - Returns: Interceptors to use when invoking 'updateArticle'.
  func makeUpdateArticleInterceptors() -> [ClientInterceptor<Haru_ArticleRequest, Haru_ArticleReply>]

  /// - Returns: Interceptors to use when invoking 'getFilterdLikes'.
  func makeGetFilterdLikesInterceptors() -> [ClientInterceptor<Haru_FilterdLikesRequest, Haru_FilterdLikesRequest>]

  /// - Returns: Interceptors to use when invoking 'createLike'.
  func makeCreateLikeInterceptors() -> [ClientInterceptor<Haru_LikeRequest, Haru_LikeReply>]

  /// - Returns: Interceptors to use when invoking 'updateLike'.
  func makeUpdateLikeInterceptors() -> [ClientInterceptor<Haru_LikeRequest, Haru_LikeReply>]

  /// - Returns: Interceptors to use when invoking 'getCount'.
  func makeGetCountInterceptors() -> [ClientInterceptor<Haru_Count, Haru_Count>]

  /// - Returns: Interceptors to use when invoking 'getPlaceKaKao'.
  func makeGetPlaceKaKaoInterceptors() -> [ClientInterceptor<Haru_PlaceKakaoRequest, Haru_PlaceKakaoReply>]

  /// - Returns: Interceptors to use when invoking 'getEtcd'.
  func makeGetEtcdInterceptors() -> [ClientInterceptor<Haru_EtcdRequest, Haru_EtcdReply>]

  /// - Returns: Interceptors to use when invoking 'deleteGame'.
  func makeDeleteGameInterceptors() -> [ClientInterceptor<Haru_GameRequest, Haru_GameReply>]

  /// - Returns: Interceptors to use when invoking 'deleteArticle'.
  func makeDeleteArticleInterceptors() -> [ClientInterceptor<Haru_ArticleRequest, Haru_ArticleReply>]
}

internal enum Haru_version1ClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "version1",
    fullName: "haru.version1",
    methods: [
      Haru_version1ClientMetadata.Methods.createAccount,
      Haru_version1ClientMetadata.Methods.getProfile,
      Haru_version1ClientMetadata.Methods.updateProfile,
      Haru_version1ClientMetadata.Methods.createGame,
      Haru_version1ClientMetadata.Methods.updateGame,
      Haru_version1ClientMetadata.Methods.getGame,
      Haru_version1ClientMetadata.Methods.getGameMulti,
      Haru_version1ClientMetadata.Methods.getFilterdGames,
      Haru_version1ClientMetadata.Methods.join,
      Haru_version1ClientMetadata.Methods.getMyJoins,
      Haru_version1ClientMetadata.Methods.getMyBeforeJoins,
      Haru_version1ClientMetadata.Methods.getGameJoins,
      Haru_version1ClientMetadata.Methods.updateJoin,
      Haru_version1ClientMetadata.Methods.getChat,
      Haru_version1ClientMetadata.Methods.addChatMessage,
      Haru_version1ClientMetadata.Methods.getFilterdArticles,
      Haru_version1ClientMetadata.Methods.createArticle,
      Haru_version1ClientMetadata.Methods.updateArticle,
      Haru_version1ClientMetadata.Methods.getFilterdLikes,
      Haru_version1ClientMetadata.Methods.createLike,
      Haru_version1ClientMetadata.Methods.updateLike,
      Haru_version1ClientMetadata.Methods.getCount,
      Haru_version1ClientMetadata.Methods.getPlaceKaKao,
      Haru_version1ClientMetadata.Methods.getEtcd,
      Haru_version1ClientMetadata.Methods.deleteGame,
      Haru_version1ClientMetadata.Methods.deleteArticle,
    ]
  )

  internal enum Methods {
    internal static let createAccount = GRPCMethodDescriptor(
      name: "CreateAccount",
      path: "/haru.version1/CreateAccount",
      type: GRPCCallType.unary
    )

    internal static let getProfile = GRPCMethodDescriptor(
      name: "GetProfile",
      path: "/haru.version1/GetProfile",
      type: GRPCCallType.unary
    )

    internal static let updateProfile = GRPCMethodDescriptor(
      name: "UpdateProfile",
      path: "/haru.version1/UpdateProfile",
      type: GRPCCallType.unary
    )

    internal static let createGame = GRPCMethodDescriptor(
      name: "CreateGame",
      path: "/haru.version1/CreateGame",
      type: GRPCCallType.unary
    )

    internal static let updateGame = GRPCMethodDescriptor(
      name: "UpdateGame",
      path: "/haru.version1/UpdateGame",
      type: GRPCCallType.unary
    )

    internal static let getGame = GRPCMethodDescriptor(
      name: "GetGame",
      path: "/haru.version1/GetGame",
      type: GRPCCallType.unary
    )

    internal static let getGameMulti = GRPCMethodDescriptor(
      name: "GetGameMulti",
      path: "/haru.version1/GetGameMulti",
      type: GRPCCallType.unary
    )

    internal static let getFilterdGames = GRPCMethodDescriptor(
      name: "GetFilterdGames",
      path: "/haru.version1/GetFilterdGames",
      type: GRPCCallType.unary
    )

    internal static let join = GRPCMethodDescriptor(
      name: "Join",
      path: "/haru.version1/Join",
      type: GRPCCallType.unary
    )

    internal static let getMyJoins = GRPCMethodDescriptor(
      name: "GetMyJoins",
      path: "/haru.version1/GetMyJoins",
      type: GRPCCallType.unary
    )

    internal static let getMyBeforeJoins = GRPCMethodDescriptor(
      name: "GetMyBeforeJoins",
      path: "/haru.version1/GetMyBeforeJoins",
      type: GRPCCallType.unary
    )

    internal static let getGameJoins = GRPCMethodDescriptor(
      name: "GetGameJoins",
      path: "/haru.version1/GetGameJoins",
      type: GRPCCallType.unary
    )

    internal static let updateJoin = GRPCMethodDescriptor(
      name: "UpdateJoin",
      path: "/haru.version1/UpdateJoin",
      type: GRPCCallType.unary
    )

    internal static let getChat = GRPCMethodDescriptor(
      name: "GetChat",
      path: "/haru.version1/GetChat",
      type: GRPCCallType.unary
    )

    internal static let addChatMessage = GRPCMethodDescriptor(
      name: "AddChatMessage",
      path: "/haru.version1/AddChatMessage",
      type: GRPCCallType.unary
    )

    internal static let getFilterdArticles = GRPCMethodDescriptor(
      name: "GetFilterdArticles",
      path: "/haru.version1/GetFilterdArticles",
      type: GRPCCallType.unary
    )

    internal static let createArticle = GRPCMethodDescriptor(
      name: "CreateArticle",
      path: "/haru.version1/CreateArticle",
      type: GRPCCallType.unary
    )

    internal static let updateArticle = GRPCMethodDescriptor(
      name: "UpdateArticle",
      path: "/haru.version1/UpdateArticle",
      type: GRPCCallType.unary
    )

    internal static let getFilterdLikes = GRPCMethodDescriptor(
      name: "GetFilterdLikes",
      path: "/haru.version1/GetFilterdLikes",
      type: GRPCCallType.unary
    )

    internal static let createLike = GRPCMethodDescriptor(
      name: "CreateLike",
      path: "/haru.version1/CreateLike",
      type: GRPCCallType.unary
    )

    internal static let updateLike = GRPCMethodDescriptor(
      name: "UpdateLike",
      path: "/haru.version1/UpdateLike",
      type: GRPCCallType.unary
    )

    internal static let getCount = GRPCMethodDescriptor(
      name: "GetCount",
      path: "/haru.version1/GetCount",
      type: GRPCCallType.unary
    )

    internal static let getPlaceKaKao = GRPCMethodDescriptor(
      name: "GetPlaceKaKao",
      path: "/haru.version1/GetPlaceKaKao",
      type: GRPCCallType.unary
    )

    internal static let getEtcd = GRPCMethodDescriptor(
      name: "GetEtcd",
      path: "/haru.version1/GetEtcd",
      type: GRPCCallType.unary
    )

    internal static let deleteGame = GRPCMethodDescriptor(
      name: "DeleteGame",
      path: "/haru.version1/DeleteGame",
      type: GRPCCallType.unary
    )

    internal static let deleteArticle = GRPCMethodDescriptor(
      name: "DeleteArticle",
      path: "/haru.version1/DeleteArticle",
      type: GRPCCallType.unary
    )
  }
}

/// Service definition.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Haru_version1Provider: CallHandlerProvider {
  var interceptors: Haru_version1ServerInterceptorFactoryProtocol? { get }

  func createAccount(request: Haru_AccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_AccountReply>

  func getProfile(request: Haru_ProfileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_ProfileReply>

  func updateProfile(request: Haru_ProfileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_ProfileReply>

  func createGame(request: Haru_GameRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_GameReply>

  func updateGame(request: Haru_GameRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_GameReply>

  func getGame(request: Haru_GameRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_GameReply>

  func getGameMulti(request: Haru_GameMultiRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_GameMultiReply>

  func getFilterdGames(request: Haru_FilterdGamesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_FilterdGamesReply>

  func join(request: Haru_JoinRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_JoinReply>

  func getMyJoins(request: Haru_JoinRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_JoinReply>

  func getMyBeforeJoins(request: Haru_JoinRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_JoinReply>

  func getGameJoins(request: Haru_JoinRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_JoinReply>

  func updateJoin(request: Haru_JoinRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_JoinReply>

  func getChat(request: Haru_ChatRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_ChatReply>

  func addChatMessage(request: Haru_ChatMessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_ChatReply>

  func getFilterdArticles(request: Haru_FilterdArticlesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_FilterdArticlesReply>

  func createArticle(request: Haru_ArticleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_ArticleReply>

  func updateArticle(request: Haru_ArticleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_ArticleReply>

  func getFilterdLikes(request: Haru_FilterdLikesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_FilterdLikesRequest>

  func createLike(request: Haru_LikeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_LikeReply>

  func updateLike(request: Haru_LikeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_LikeReply>

  func getCount(request: Haru_Count, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_Count>

  func getPlaceKaKao(request: Haru_PlaceKakaoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_PlaceKakaoReply>

  func getEtcd(request: Haru_EtcdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_EtcdReply>

  func deleteGame(request: Haru_GameRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_GameReply>

  func deleteArticle(request: Haru_ArticleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Haru_ArticleReply>
}

extension Haru_version1Provider {
  internal var serviceName: Substring {
    return Haru_version1ServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_AccountRequest>(),
        responseSerializer: ProtobufSerializer<Haru_AccountReply>(),
        interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? [],
        userFunction: self.createAccount(request:context:)
      )

    case "GetProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ProfileRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ProfileReply>(),
        interceptors: self.interceptors?.makeGetProfileInterceptors() ?? [],
        userFunction: self.getProfile(request:context:)
      )

    case "UpdateProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ProfileRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ProfileReply>(),
        interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? [],
        userFunction: self.updateProfile(request:context:)
      )

    case "CreateGame":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_GameRequest>(),
        responseSerializer: ProtobufSerializer<Haru_GameReply>(),
        interceptors: self.interceptors?.makeCreateGameInterceptors() ?? [],
        userFunction: self.createGame(request:context:)
      )

    case "UpdateGame":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_GameRequest>(),
        responseSerializer: ProtobufSerializer<Haru_GameReply>(),
        interceptors: self.interceptors?.makeUpdateGameInterceptors() ?? [],
        userFunction: self.updateGame(request:context:)
      )

    case "GetGame":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_GameRequest>(),
        responseSerializer: ProtobufSerializer<Haru_GameReply>(),
        interceptors: self.interceptors?.makeGetGameInterceptors() ?? [],
        userFunction: self.getGame(request:context:)
      )

    case "GetGameMulti":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_GameMultiRequest>(),
        responseSerializer: ProtobufSerializer<Haru_GameMultiReply>(),
        interceptors: self.interceptors?.makeGetGameMultiInterceptors() ?? [],
        userFunction: self.getGameMulti(request:context:)
      )

    case "GetFilterdGames":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_FilterdGamesRequest>(),
        responseSerializer: ProtobufSerializer<Haru_FilterdGamesReply>(),
        interceptors: self.interceptors?.makeGetFilterdGamesInterceptors() ?? [],
        userFunction: self.getFilterdGames(request:context:)
      )

    case "Join":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_JoinRequest>(),
        responseSerializer: ProtobufSerializer<Haru_JoinReply>(),
        interceptors: self.interceptors?.makeJoinInterceptors() ?? [],
        userFunction: self.join(request:context:)
      )

    case "GetMyJoins":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_JoinRequest>(),
        responseSerializer: ProtobufSerializer<Haru_JoinReply>(),
        interceptors: self.interceptors?.makeGetMyJoinsInterceptors() ?? [],
        userFunction: self.getMyJoins(request:context:)
      )

    case "GetMyBeforeJoins":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_JoinRequest>(),
        responseSerializer: ProtobufSerializer<Haru_JoinReply>(),
        interceptors: self.interceptors?.makeGetMyBeforeJoinsInterceptors() ?? [],
        userFunction: self.getMyBeforeJoins(request:context:)
      )

    case "GetGameJoins":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_JoinRequest>(),
        responseSerializer: ProtobufSerializer<Haru_JoinReply>(),
        interceptors: self.interceptors?.makeGetGameJoinsInterceptors() ?? [],
        userFunction: self.getGameJoins(request:context:)
      )

    case "UpdateJoin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_JoinRequest>(),
        responseSerializer: ProtobufSerializer<Haru_JoinReply>(),
        interceptors: self.interceptors?.makeUpdateJoinInterceptors() ?? [],
        userFunction: self.updateJoin(request:context:)
      )

    case "GetChat":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ChatRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ChatReply>(),
        interceptors: self.interceptors?.makeGetChatInterceptors() ?? [],
        userFunction: self.getChat(request:context:)
      )

    case "AddChatMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ChatMessageRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ChatReply>(),
        interceptors: self.interceptors?.makeAddChatMessageInterceptors() ?? [],
        userFunction: self.addChatMessage(request:context:)
      )

    case "GetFilterdArticles":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_FilterdArticlesRequest>(),
        responseSerializer: ProtobufSerializer<Haru_FilterdArticlesReply>(),
        interceptors: self.interceptors?.makeGetFilterdArticlesInterceptors() ?? [],
        userFunction: self.getFilterdArticles(request:context:)
      )

    case "CreateArticle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ArticleRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ArticleReply>(),
        interceptors: self.interceptors?.makeCreateArticleInterceptors() ?? [],
        userFunction: self.createArticle(request:context:)
      )

    case "UpdateArticle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ArticleRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ArticleReply>(),
        interceptors: self.interceptors?.makeUpdateArticleInterceptors() ?? [],
        userFunction: self.updateArticle(request:context:)
      )

    case "GetFilterdLikes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_FilterdLikesRequest>(),
        responseSerializer: ProtobufSerializer<Haru_FilterdLikesRequest>(),
        interceptors: self.interceptors?.makeGetFilterdLikesInterceptors() ?? [],
        userFunction: self.getFilterdLikes(request:context:)
      )

    case "CreateLike":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_LikeRequest>(),
        responseSerializer: ProtobufSerializer<Haru_LikeReply>(),
        interceptors: self.interceptors?.makeCreateLikeInterceptors() ?? [],
        userFunction: self.createLike(request:context:)
      )

    case "UpdateLike":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_LikeRequest>(),
        responseSerializer: ProtobufSerializer<Haru_LikeReply>(),
        interceptors: self.interceptors?.makeUpdateLikeInterceptors() ?? [],
        userFunction: self.updateLike(request:context:)
      )

    case "GetCount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_Count>(),
        responseSerializer: ProtobufSerializer<Haru_Count>(),
        interceptors: self.interceptors?.makeGetCountInterceptors() ?? [],
        userFunction: self.getCount(request:context:)
      )

    case "GetPlaceKaKao":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_PlaceKakaoRequest>(),
        responseSerializer: ProtobufSerializer<Haru_PlaceKakaoReply>(),
        interceptors: self.interceptors?.makeGetPlaceKaKaoInterceptors() ?? [],
        userFunction: self.getPlaceKaKao(request:context:)
      )

    case "GetEtcd":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_EtcdRequest>(),
        responseSerializer: ProtobufSerializer<Haru_EtcdReply>(),
        interceptors: self.interceptors?.makeGetEtcdInterceptors() ?? [],
        userFunction: self.getEtcd(request:context:)
      )

    case "DeleteGame":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_GameRequest>(),
        responseSerializer: ProtobufSerializer<Haru_GameReply>(),
        interceptors: self.interceptors?.makeDeleteGameInterceptors() ?? [],
        userFunction: self.deleteGame(request:context:)
      )

    case "DeleteArticle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ArticleRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ArticleReply>(),
        interceptors: self.interceptors?.makeDeleteArticleInterceptors() ?? [],
        userFunction: self.deleteArticle(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// Service definition.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Haru_version1AsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Haru_version1ServerInterceptorFactoryProtocol? { get }

  @Sendable func createAccount(
    request: Haru_AccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_AccountReply

  @Sendable func getProfile(
    request: Haru_ProfileRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_ProfileReply

  @Sendable func updateProfile(
    request: Haru_ProfileRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_ProfileReply

  @Sendable func createGame(
    request: Haru_GameRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_GameReply

  @Sendable func updateGame(
    request: Haru_GameRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_GameReply

  @Sendable func getGame(
    request: Haru_GameRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_GameReply

  @Sendable func getGameMulti(
    request: Haru_GameMultiRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_GameMultiReply

  @Sendable func getFilterdGames(
    request: Haru_FilterdGamesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_FilterdGamesReply

  @Sendable func join(
    request: Haru_JoinRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_JoinReply

  @Sendable func getMyJoins(
    request: Haru_JoinRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_JoinReply

  @Sendable func getMyBeforeJoins(
    request: Haru_JoinRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_JoinReply

  @Sendable func getGameJoins(
    request: Haru_JoinRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_JoinReply

  @Sendable func updateJoin(
    request: Haru_JoinRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_JoinReply

  @Sendable func getChat(
    request: Haru_ChatRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_ChatReply

  @Sendable func addChatMessage(
    request: Haru_ChatMessageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_ChatReply

  @Sendable func getFilterdArticles(
    request: Haru_FilterdArticlesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_FilterdArticlesReply

  @Sendable func createArticle(
    request: Haru_ArticleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_ArticleReply

  @Sendable func updateArticle(
    request: Haru_ArticleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_ArticleReply

  @Sendable func getFilterdLikes(
    request: Haru_FilterdLikesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_FilterdLikesRequest

  @Sendable func createLike(
    request: Haru_LikeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_LikeReply

  @Sendable func updateLike(
    request: Haru_LikeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_LikeReply

  @Sendable func getCount(
    request: Haru_Count,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_Count

  @Sendable func getPlaceKaKao(
    request: Haru_PlaceKakaoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_PlaceKakaoReply

  @Sendable func getEtcd(
    request: Haru_EtcdRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_EtcdReply

  @Sendable func deleteGame(
    request: Haru_GameRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_GameReply

  @Sendable func deleteArticle(
    request: Haru_ArticleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Haru_ArticleReply
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Haru_version1AsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Haru_version1ServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Haru_version1ServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Haru_version1ServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_AccountRequest>(),
        responseSerializer: ProtobufSerializer<Haru_AccountReply>(),
        interceptors: self.interceptors?.makeCreateAccountInterceptors() ?? [],
        wrapping: self.createAccount(request:context:)
      )

    case "GetProfile":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ProfileRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ProfileReply>(),
        interceptors: self.interceptors?.makeGetProfileInterceptors() ?? [],
        wrapping: self.getProfile(request:context:)
      )

    case "UpdateProfile":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ProfileRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ProfileReply>(),
        interceptors: self.interceptors?.makeUpdateProfileInterceptors() ?? [],
        wrapping: self.updateProfile(request:context:)
      )

    case "CreateGame":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_GameRequest>(),
        responseSerializer: ProtobufSerializer<Haru_GameReply>(),
        interceptors: self.interceptors?.makeCreateGameInterceptors() ?? [],
        wrapping: self.createGame(request:context:)
      )

    case "UpdateGame":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_GameRequest>(),
        responseSerializer: ProtobufSerializer<Haru_GameReply>(),
        interceptors: self.interceptors?.makeUpdateGameInterceptors() ?? [],
        wrapping: self.updateGame(request:context:)
      )

    case "GetGame":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_GameRequest>(),
        responseSerializer: ProtobufSerializer<Haru_GameReply>(),
        interceptors: self.interceptors?.makeGetGameInterceptors() ?? [],
        wrapping: self.getGame(request:context:)
      )

    case "GetGameMulti":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_GameMultiRequest>(),
        responseSerializer: ProtobufSerializer<Haru_GameMultiReply>(),
        interceptors: self.interceptors?.makeGetGameMultiInterceptors() ?? [],
        wrapping: self.getGameMulti(request:context:)
      )

    case "GetFilterdGames":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_FilterdGamesRequest>(),
        responseSerializer: ProtobufSerializer<Haru_FilterdGamesReply>(),
        interceptors: self.interceptors?.makeGetFilterdGamesInterceptors() ?? [],
        wrapping: self.getFilterdGames(request:context:)
      )

    case "Join":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_JoinRequest>(),
        responseSerializer: ProtobufSerializer<Haru_JoinReply>(),
        interceptors: self.interceptors?.makeJoinInterceptors() ?? [],
        wrapping: self.join(request:context:)
      )

    case "GetMyJoins":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_JoinRequest>(),
        responseSerializer: ProtobufSerializer<Haru_JoinReply>(),
        interceptors: self.interceptors?.makeGetMyJoinsInterceptors() ?? [],
        wrapping: self.getMyJoins(request:context:)
      )

    case "GetMyBeforeJoins":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_JoinRequest>(),
        responseSerializer: ProtobufSerializer<Haru_JoinReply>(),
        interceptors: self.interceptors?.makeGetMyBeforeJoinsInterceptors() ?? [],
        wrapping: self.getMyBeforeJoins(request:context:)
      )

    case "GetGameJoins":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_JoinRequest>(),
        responseSerializer: ProtobufSerializer<Haru_JoinReply>(),
        interceptors: self.interceptors?.makeGetGameJoinsInterceptors() ?? [],
        wrapping: self.getGameJoins(request:context:)
      )

    case "UpdateJoin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_JoinRequest>(),
        responseSerializer: ProtobufSerializer<Haru_JoinReply>(),
        interceptors: self.interceptors?.makeUpdateJoinInterceptors() ?? [],
        wrapping: self.updateJoin(request:context:)
      )

    case "GetChat":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ChatRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ChatReply>(),
        interceptors: self.interceptors?.makeGetChatInterceptors() ?? [],
        wrapping: self.getChat(request:context:)
      )

    case "AddChatMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ChatMessageRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ChatReply>(),
        interceptors: self.interceptors?.makeAddChatMessageInterceptors() ?? [],
        wrapping: self.addChatMessage(request:context:)
      )

    case "GetFilterdArticles":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_FilterdArticlesRequest>(),
        responseSerializer: ProtobufSerializer<Haru_FilterdArticlesReply>(),
        interceptors: self.interceptors?.makeGetFilterdArticlesInterceptors() ?? [],
        wrapping: self.getFilterdArticles(request:context:)
      )

    case "CreateArticle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ArticleRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ArticleReply>(),
        interceptors: self.interceptors?.makeCreateArticleInterceptors() ?? [],
        wrapping: self.createArticle(request:context:)
      )

    case "UpdateArticle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ArticleRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ArticleReply>(),
        interceptors: self.interceptors?.makeUpdateArticleInterceptors() ?? [],
        wrapping: self.updateArticle(request:context:)
      )

    case "GetFilterdLikes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_FilterdLikesRequest>(),
        responseSerializer: ProtobufSerializer<Haru_FilterdLikesRequest>(),
        interceptors: self.interceptors?.makeGetFilterdLikesInterceptors() ?? [],
        wrapping: self.getFilterdLikes(request:context:)
      )

    case "CreateLike":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_LikeRequest>(),
        responseSerializer: ProtobufSerializer<Haru_LikeReply>(),
        interceptors: self.interceptors?.makeCreateLikeInterceptors() ?? [],
        wrapping: self.createLike(request:context:)
      )

    case "UpdateLike":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_LikeRequest>(),
        responseSerializer: ProtobufSerializer<Haru_LikeReply>(),
        interceptors: self.interceptors?.makeUpdateLikeInterceptors() ?? [],
        wrapping: self.updateLike(request:context:)
      )

    case "GetCount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_Count>(),
        responseSerializer: ProtobufSerializer<Haru_Count>(),
        interceptors: self.interceptors?.makeGetCountInterceptors() ?? [],
        wrapping: self.getCount(request:context:)
      )

    case "GetPlaceKaKao":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_PlaceKakaoRequest>(),
        responseSerializer: ProtobufSerializer<Haru_PlaceKakaoReply>(),
        interceptors: self.interceptors?.makeGetPlaceKaKaoInterceptors() ?? [],
        wrapping: self.getPlaceKaKao(request:context:)
      )

    case "GetEtcd":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_EtcdRequest>(),
        responseSerializer: ProtobufSerializer<Haru_EtcdReply>(),
        interceptors: self.interceptors?.makeGetEtcdInterceptors() ?? [],
        wrapping: self.getEtcd(request:context:)
      )

    case "DeleteGame":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_GameRequest>(),
        responseSerializer: ProtobufSerializer<Haru_GameReply>(),
        interceptors: self.interceptors?.makeDeleteGameInterceptors() ?? [],
        wrapping: self.deleteGame(request:context:)
      )

    case "DeleteArticle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Haru_ArticleRequest>(),
        responseSerializer: ProtobufSerializer<Haru_ArticleReply>(),
        interceptors: self.interceptors?.makeDeleteArticleInterceptors() ?? [],
        wrapping: self.deleteArticle(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Haru_version1ServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAccountInterceptors() -> [ServerInterceptor<Haru_AccountRequest, Haru_AccountReply>]

  /// - Returns: Interceptors to use when handling 'getProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProfileInterceptors() -> [ServerInterceptor<Haru_ProfileRequest, Haru_ProfileReply>]

  /// - Returns: Interceptors to use when handling 'updateProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateProfileInterceptors() -> [ServerInterceptor<Haru_ProfileRequest, Haru_ProfileReply>]

  /// - Returns: Interceptors to use when handling 'createGame'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateGameInterceptors() -> [ServerInterceptor<Haru_GameRequest, Haru_GameReply>]

  /// - Returns: Interceptors to use when handling 'updateGame'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGameInterceptors() -> [ServerInterceptor<Haru_GameRequest, Haru_GameReply>]

  /// - Returns: Interceptors to use when handling 'getGame'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetGameInterceptors() -> [ServerInterceptor<Haru_GameRequest, Haru_GameReply>]

  /// - Returns: Interceptors to use when handling 'getGameMulti'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetGameMultiInterceptors() -> [ServerInterceptor<Haru_GameMultiRequest, Haru_GameMultiReply>]

  /// - Returns: Interceptors to use when handling 'getFilterdGames'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFilterdGamesInterceptors() -> [ServerInterceptor<Haru_FilterdGamesRequest, Haru_FilterdGamesReply>]

  /// - Returns: Interceptors to use when handling 'join'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeJoinInterceptors() -> [ServerInterceptor<Haru_JoinRequest, Haru_JoinReply>]

  /// - Returns: Interceptors to use when handling 'getMyJoins'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMyJoinsInterceptors() -> [ServerInterceptor<Haru_JoinRequest, Haru_JoinReply>]

  /// - Returns: Interceptors to use when handling 'getMyBeforeJoins'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMyBeforeJoinsInterceptors() -> [ServerInterceptor<Haru_JoinRequest, Haru_JoinReply>]

  /// - Returns: Interceptors to use when handling 'getGameJoins'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetGameJoinsInterceptors() -> [ServerInterceptor<Haru_JoinRequest, Haru_JoinReply>]

  /// - Returns: Interceptors to use when handling 'updateJoin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateJoinInterceptors() -> [ServerInterceptor<Haru_JoinRequest, Haru_JoinReply>]

  /// - Returns: Interceptors to use when handling 'getChat'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetChatInterceptors() -> [ServerInterceptor<Haru_ChatRequest, Haru_ChatReply>]

  /// - Returns: Interceptors to use when handling 'addChatMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddChatMessageInterceptors() -> [ServerInterceptor<Haru_ChatMessageRequest, Haru_ChatReply>]

  /// - Returns: Interceptors to use when handling 'getFilterdArticles'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFilterdArticlesInterceptors() -> [ServerInterceptor<Haru_FilterdArticlesRequest, Haru_FilterdArticlesReply>]

  /// - Returns: Interceptors to use when handling 'createArticle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateArticleInterceptors() -> [ServerInterceptor<Haru_ArticleRequest, Haru_ArticleReply>]

  /// - Returns: Interceptors to use when handling 'updateArticle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateArticleInterceptors() -> [ServerInterceptor<Haru_ArticleRequest, Haru_ArticleReply>]

  /// - Returns: Interceptors to use when handling 'getFilterdLikes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFilterdLikesInterceptors() -> [ServerInterceptor<Haru_FilterdLikesRequest, Haru_FilterdLikesRequest>]

  /// - Returns: Interceptors to use when handling 'createLike'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateLikeInterceptors() -> [ServerInterceptor<Haru_LikeRequest, Haru_LikeReply>]

  /// - Returns: Interceptors to use when handling 'updateLike'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateLikeInterceptors() -> [ServerInterceptor<Haru_LikeRequest, Haru_LikeReply>]

  /// - Returns: Interceptors to use when handling 'getCount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCountInterceptors() -> [ServerInterceptor<Haru_Count, Haru_Count>]

  /// - Returns: Interceptors to use when handling 'getPlaceKaKao'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPlaceKaKaoInterceptors() -> [ServerInterceptor<Haru_PlaceKakaoRequest, Haru_PlaceKakaoReply>]

  /// - Returns: Interceptors to use when handling 'getEtcd'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetEtcdInterceptors() -> [ServerInterceptor<Haru_EtcdRequest, Haru_EtcdReply>]

  /// - Returns: Interceptors to use when handling 'deleteGame'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteGameInterceptors() -> [ServerInterceptor<Haru_GameRequest, Haru_GameReply>]

  /// - Returns: Interceptors to use when handling 'deleteArticle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteArticleInterceptors() -> [ServerInterceptor<Haru_ArticleRequest, Haru_ArticleReply>]
}

internal enum Haru_version1ServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "version1",
    fullName: "haru.version1",
    methods: [
      Haru_version1ServerMetadata.Methods.createAccount,
      Haru_version1ServerMetadata.Methods.getProfile,
      Haru_version1ServerMetadata.Methods.updateProfile,
      Haru_version1ServerMetadata.Methods.createGame,
      Haru_version1ServerMetadata.Methods.updateGame,
      Haru_version1ServerMetadata.Methods.getGame,
      Haru_version1ServerMetadata.Methods.getGameMulti,
      Haru_version1ServerMetadata.Methods.getFilterdGames,
      Haru_version1ServerMetadata.Methods.join,
      Haru_version1ServerMetadata.Methods.getMyJoins,
      Haru_version1ServerMetadata.Methods.getMyBeforeJoins,
      Haru_version1ServerMetadata.Methods.getGameJoins,
      Haru_version1ServerMetadata.Methods.updateJoin,
      Haru_version1ServerMetadata.Methods.getChat,
      Haru_version1ServerMetadata.Methods.addChatMessage,
      Haru_version1ServerMetadata.Methods.getFilterdArticles,
      Haru_version1ServerMetadata.Methods.createArticle,
      Haru_version1ServerMetadata.Methods.updateArticle,
      Haru_version1ServerMetadata.Methods.getFilterdLikes,
      Haru_version1ServerMetadata.Methods.createLike,
      Haru_version1ServerMetadata.Methods.updateLike,
      Haru_version1ServerMetadata.Methods.getCount,
      Haru_version1ServerMetadata.Methods.getPlaceKaKao,
      Haru_version1ServerMetadata.Methods.getEtcd,
      Haru_version1ServerMetadata.Methods.deleteGame,
      Haru_version1ServerMetadata.Methods.deleteArticle,
    ]
  )

  internal enum Methods {
    internal static let createAccount = GRPCMethodDescriptor(
      name: "CreateAccount",
      path: "/haru.version1/CreateAccount",
      type: GRPCCallType.unary
    )

    internal static let getProfile = GRPCMethodDescriptor(
      name: "GetProfile",
      path: "/haru.version1/GetProfile",
      type: GRPCCallType.unary
    )

    internal static let updateProfile = GRPCMethodDescriptor(
      name: "UpdateProfile",
      path: "/haru.version1/UpdateProfile",
      type: GRPCCallType.unary
    )

    internal static let createGame = GRPCMethodDescriptor(
      name: "CreateGame",
      path: "/haru.version1/CreateGame",
      type: GRPCCallType.unary
    )

    internal static let updateGame = GRPCMethodDescriptor(
      name: "UpdateGame",
      path: "/haru.version1/UpdateGame",
      type: GRPCCallType.unary
    )

    internal static let getGame = GRPCMethodDescriptor(
      name: "GetGame",
      path: "/haru.version1/GetGame",
      type: GRPCCallType.unary
    )

    internal static let getGameMulti = GRPCMethodDescriptor(
      name: "GetGameMulti",
      path: "/haru.version1/GetGameMulti",
      type: GRPCCallType.unary
    )

    internal static let getFilterdGames = GRPCMethodDescriptor(
      name: "GetFilterdGames",
      path: "/haru.version1/GetFilterdGames",
      type: GRPCCallType.unary
    )

    internal static let join = GRPCMethodDescriptor(
      name: "Join",
      path: "/haru.version1/Join",
      type: GRPCCallType.unary
    )

    internal static let getMyJoins = GRPCMethodDescriptor(
      name: "GetMyJoins",
      path: "/haru.version1/GetMyJoins",
      type: GRPCCallType.unary
    )

    internal static let getMyBeforeJoins = GRPCMethodDescriptor(
      name: "GetMyBeforeJoins",
      path: "/haru.version1/GetMyBeforeJoins",
      type: GRPCCallType.unary
    )

    internal static let getGameJoins = GRPCMethodDescriptor(
      name: "GetGameJoins",
      path: "/haru.version1/GetGameJoins",
      type: GRPCCallType.unary
    )

    internal static let updateJoin = GRPCMethodDescriptor(
      name: "UpdateJoin",
      path: "/haru.version1/UpdateJoin",
      type: GRPCCallType.unary
    )

    internal static let getChat = GRPCMethodDescriptor(
      name: "GetChat",
      path: "/haru.version1/GetChat",
      type: GRPCCallType.unary
    )

    internal static let addChatMessage = GRPCMethodDescriptor(
      name: "AddChatMessage",
      path: "/haru.version1/AddChatMessage",
      type: GRPCCallType.unary
    )

    internal static let getFilterdArticles = GRPCMethodDescriptor(
      name: "GetFilterdArticles",
      path: "/haru.version1/GetFilterdArticles",
      type: GRPCCallType.unary
    )

    internal static let createArticle = GRPCMethodDescriptor(
      name: "CreateArticle",
      path: "/haru.version1/CreateArticle",
      type: GRPCCallType.unary
    )

    internal static let updateArticle = GRPCMethodDescriptor(
      name: "UpdateArticle",
      path: "/haru.version1/UpdateArticle",
      type: GRPCCallType.unary
    )

    internal static let getFilterdLikes = GRPCMethodDescriptor(
      name: "GetFilterdLikes",
      path: "/haru.version1/GetFilterdLikes",
      type: GRPCCallType.unary
    )

    internal static let createLike = GRPCMethodDescriptor(
      name: "CreateLike",
      path: "/haru.version1/CreateLike",
      type: GRPCCallType.unary
    )

    internal static let updateLike = GRPCMethodDescriptor(
      name: "UpdateLike",
      path: "/haru.version1/UpdateLike",
      type: GRPCCallType.unary
    )

    internal static let getCount = GRPCMethodDescriptor(
      name: "GetCount",
      path: "/haru.version1/GetCount",
      type: GRPCCallType.unary
    )

    internal static let getPlaceKaKao = GRPCMethodDescriptor(
      name: "GetPlaceKaKao",
      path: "/haru.version1/GetPlaceKaKao",
      type: GRPCCallType.unary
    )

    internal static let getEtcd = GRPCMethodDescriptor(
      name: "GetEtcd",
      path: "/haru.version1/GetEtcd",
      type: GRPCCallType.unary
    )

    internal static let deleteGame = GRPCMethodDescriptor(
      name: "DeleteGame",
      path: "/haru.version1/DeleteGame",
      type: GRPCCallType.unary
    )

    internal static let deleteArticle = GRPCMethodDescriptor(
      name: "DeleteArticle",
      path: "/haru.version1/DeleteArticle",
      type: GRPCCallType.unary
    )
  }
}
